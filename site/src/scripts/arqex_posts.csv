"ID";"post_author";"post_date";"post_date_gmt";"post_content";"post_title";"post_excerpt";"post_status";"comment_status";"ping_status";"post_password";"post_name";"to_ping";"pinged";"post_modified";"post_modified_gmt";"post_content_filtered";"post_parent";"guid";"menu_order";"post_type";"post_mime_type";"comment_count"
"152";"1";"2011-03-11 20:25:33";"2011-03-11 19:25:33";"Do you know how can I have a different sidebar for each page?

<address><a title=""Wordpress custom sidebars"" href=""http://wordpress.org/extend/plugins/custom-sidebars/"" target=""_blank"">I use Custom Sidebars Plugin</a>.</address>";"Tip: Custom Sidebars";;"publish";"open";"open";;"tip-custom-sidebars";;;"2011-03-11 20:25:33";"2011-03-11 19:25:33";;"0";"http://local.marquex.es/?p=152";"0";"post";;"0"
"164";"1";"2011-03-12 13:42:10";"2011-03-12 12:42:10";"The best way of handling dozens of HTML widgets is using the <a title=""HTML Widget Entries"" href=""http://wordpress.org/extend/plugins/widget-entries/"">Widget Entry Plugin</a>.";"Tip: Widget Entries";;"publish";"open";"open";;"tip-widget-entries";;;"2011-03-12 13:42:10";"2011-03-12 12:42:10";;"0";"http://local.marquex.es/?p=164";"0";"post";;"2"
"255";"1";"2011-03-26 00:16:15";"2011-03-25 23:16:15";"Firefox is releasing versions really fast and there are new features in every one: because it is fast and has nice plugins, <a title=""Get Firefox 5"" href=""http://www.firefox.com"" target=""_blank"">Get FF5</a>";"Tip: Try Firefox 5";;"publish";"open";"open";;"tip-try-firefox-4";;;"2011-03-26 00:16:15";"2011-03-25 23:16:15";;"0";"http://local.marquex.es/?p=255";"0";"post";;"0"
"261";"1";"2011-03-26 00:26:26";"2011-03-25 23:26:26";"It is really nice to use the<a title=""Download Eclipse IDE"" href=""http://eclipse.org/""> Eclipse IDE</a> for develop PHP apps. It features debugging, autocompletion, repositories handling... A professional way of developing PHP.";"Tip: Eclipse for PHP";;"publish";"open";"open";;"tip-eclipse-for-php";;;"2011-03-26 00:26:26";"2011-03-25 23:26:26";;"0";"http://local.marquex.es/?p=261";"0";"post";;"0"
"268";"1";"2011-03-28 16:33:36";"2011-03-28 15:33:36";"This is the first post in my new brand site about technology and I hope you can enjoy it or at least you get something useful.

As a person who likes programming and technology, I like to read and write about the newest stuff, but nowadays I am working as a OpenCms programmer, and since there is not a great documentation and tutorials on the internet about it, I want to share the solutions I found to the thousand problems i found myself in with OpenCms.

One of those problems is related with the paths used to get some data in a jsp. The next list will make your life easier when you want to load some content, display an image, or link some url with opencms.

<!--more Interested abouts paths? Keep reading...-->

<a rel=""attachment wp-att-273"" href=""http://marquex.es/268/opencms-useful-paths-and-urls/uri""><img class=""alignnone size-medium wp-image-273"" title=""uri"" src=""http://marquex.es/wp-content/uploads/2011/03/uri-570x244.jpg"" alt="""" width=""570"" height=""244"" /></a>

Just a little explanation for newbies on OpenCms, if you want to use a taglib solution you will have to include the next code in the begining of your jsp:
<pre class=""brush:java"">&lt;%@ taglib prefix=""cms"" uri=""http://www.opencms.org/taglib/cms"" %&gt;</pre>
If you want to use a scriplet solution, then you will need to declare a CmsJspActionElement also in the begining of your file:
<pre class=""brush:java"">org.opencms.jsp.CmsJspActionElement cms = new org.opencms.jsp.CmsJspActionElement(pageContext, request, response);</pre>
<h3>Loading some contents from the current folder</h3>
If you want to create a jsp that read some contents from the folder that contains it, the easier way is using the cms:info tag
In this example we want to read all the news using a jsp in the same folder than the news. The path to our jsp will be ""/extra/news/index.jsp"".
<pre class=""brush:java"">With the taglib we would do:
&lt;cms:info property=""opencms.request.folder"" /&gt;
&lt;%-- prints out /extra/news/ --%&gt;</pre>
Using a scriptlet
<pre class=""brush:java"">String folderPath = cms.info(""opencms.request.folder"");
// Store ""/extra/news/"" in the variable folderPath</pre>
Using this, you will get your script to access to the content of the current folder. If you are using it to display news, you will only need to create a link to the file from other path to display their news.
<h3>Adding the context path ""/opencms/opencms/"" to your links</h3>
In my computer I have several OpenCms installations, one of them in /opencms/opencms/ and other in /opencms752/opencms/, and I need my jsp to work in all of them. If I write a link in my jsp like this:
<pre class=""brush:html"">&lt;a href=""/opencms/opencms/miimage.jpg""&gt;My image&lt;/a&gt;</pre>
It wouldn't work in the /opencms752/opencms instalation. Instead hardcoding the link, in this case it is very useful the &lt;cms:link&gt; tag:
<pre class=""brush:java"">&lt;a href=""&lt;cms:link&gt;/miimage.jpg&lt;/cms:link&gt;""&gt;My image&lt;/a&gt;
&lt;%--
Will link to
/opencms/opencms/miimage.jpg in my /opencms/opencms installation and
/opencms752/opencms/miimage.jpg in my /opencms752/opencms one.
--%&gt;</pre>
This is the proper way of linking for HTML, use it with a, img, script, style and form HTML tags.
<h3>Making a link work in the root site ""/"" and other sites ""/sites/default/""</h3>
Imagine you need a bulletproof jsp that have to work if you call it from the administration area, whenever you are in the root site or in your /sites/default or any other site you have in your opencms.
This is typical when you are creating a administration section in opencms, you want to make it work the same way when you are in any site. Keep imagining that that jsp is the one from the first example that display the news list in the folder <em>/extra/news/</em>.
If you have your opencms in<em> ""/sites/default/""</em> it will work for sure, but if you have it in the root site ""/"" it will return an error because you should search the news in the path <em>""/sites/default/extra/news/""</em>.
You can know when to add the <em>""/sites/default/"" </em>prefix using the session manager:
<pre class=""brush:java"">&lt;%@ page import=""org.opencms.main.OpenCms"" %&gt;
&lt;%
String currentSitePrefix = OpenCms.getSessionManager().getSessionInfo(session).getSiteRoot();
/*
This will store ""/sites/default/"" or whatever site we are in the currentSitePrefix variable
but if we are in the root site this will store an empty String """".
*/
%&gt;</pre>
So when I need this functionality in my jsp's I use the following function:
<pre class=""brush:java"">&lt;%!
/**
* Add the site prefix to a path if we are in the root site ""/""
* @param path String - The path we want to check.
* @param ses - The current HttpSession object.
* @return The correct path depending on the current site.
*/
String getSitePath(String path, HttpSession ses){
//If a file in the system folder is required we don't need to fix it,
//because that folder is accessible from any site
if(path.startsWith(""/system/""))
return path;
//If we are on the root site, we need to prepend the site prefix
if(OpenCms.getSessionManager().getSessionInfo(ses).getSiteRoot().equals(""""))
return org.opencms.main.OpenCms.getSiteManager().getDefaultSite().getSiteRoot() + path;
//If we are on other site we don't need to add a prefix
else
return path;
}
%&gt;
&lt;%
String path = getSitePath(""/extra/news/"", session);
//the path variable will contain ""/extra/news/"" if we are in the default site or ""/sites/default/extra/news/"" if we are in the root one.
%&gt;</pre>
This function only works with the default site, if we have more sites in our opencms we can add another parameter to the function
with the prefix of the site to prepend. When you are using one OpenCms for multiple sites you will find the CmsSiteManager class documentation very useful.";"Opencms useful paths and urls";;"publish";"open";"open";;"opencms-useful-paths-and-urls";;;"2011-03-28 16:33:36";"2011-03-28 15:33:36";;"0";"http://marquex.es/?p=268";"0";"post";;"0"
"362";"2";"2011-03-31 18:35:50";"2011-03-31 17:35:50";"&lt;cms:info&gt; is one of the most useful tags of the OpenCms taglib, but when I have a look at other's code I can see that people prefer other ways to get the same results that this tag offers just writing one line.I think that happens because a lack of documentation and examples about it. <a href=""http://www.google.es/search?sourceid=chrome&amp;ie=UTF-8&amp;q=cms%3Ainfo+opencms"" target=""_blank"">Googleing </a>a little about this tag you can find two main sources of documentation:
<ul>
	<li>Opencms cms:info tag docs</li>
	<li>Opencms cms:info tag tests</li>
</ul>
That is the original documentation packed with opencms, a really short explanation of some of the possible properties and a test for these properties where some of them returns the same result, so you can't see the differences between them.

I think I made a better example where I explain a little bit how the cms:info tag works and where you can see those differences.

<!--more Some source code inside this post. -->The example has 3 files:
<ul>
	<li>cmsinfo_probe1.jsp: Make an import of cmsinfo_probe2.jsp.</li>
	<li>cmsinfo_probe2.jsp: Load a xml content and print the cms:info properties</li>
	<li>element.html: A xml content to be loaded from cmsinfo_probe2.jsp and make some experiments.</li>
</ul>
I attach <a href=""http://marquex.es/?attachment_id=363"" target=""_blank"">a zip with the test files</a>.

In cmsinfo_probe1.jsp we make an import, this way we will be able to see de differences between 'opencms.uri' and 'opencms.request.uri':
<pre lang=""java"" escaped=""true"" line=""1"">&lt;%@ taglib prefix=""cms"" uri=""http://www.opencms.org/taglib/cms"" %&gt;
&lt;cms:include page=""cmsinfo_probe2.jsp"" /&gt;</pre>
In cmsinfo_probe2.jsp a contentload is made because i thought that maybe the 'opencms.request.element.uri' parameter was going to show the uri of the element loaded by &lt;cms:contentload&gt;. I was wrong:
<pre lang=""java"" escaped=""true"" line=""1"">&lt;%@ taglib prefix=""cms"" uri=""http://www.opencms.org/taglib/cms"" %&gt;&lt;!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd""&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
        &lt;meta http-equiv=""Content-Type"" content=""text/html;charset=UTF-8""&gt;
	&lt;title&gt;cms:info probe&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;cms:contentload collector=""singleFile"" param=""%(opencms.folder)element.html""&gt;
  &lt;h3&gt;OpenCms Parameters&lt;/h3&gt;
  &lt;b&gt;opencms.version:&lt;/b&gt; &lt;pre&gt;&lt;cms:info property=""opencms.version"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.url: &lt;/b&gt;&lt;pre&gt;&lt;cms:info property=""opencms.url"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.uri:&lt;/b&gt; &lt;pre&gt;&lt;cms:info property=""opencms.uri"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.webapp&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.webapp"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.webbasepath&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.webbasepath"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.request.uri&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.request.uri"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.request.element.uri&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.request.element.uri"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.request.folder&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.request.folder"" /&gt;&lt;/pre&gt;&lt;br/&gt;
		&lt;h3&gt;Non usual OpenCms Parameters&lt;/h3&gt;
	&lt;b&gt;opencms.request.encoding&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.request.encoding"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;opencms.request.locale&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""opencms.request.locale"" /&gt;&lt;/pre&gt;&lt;br/&gt;
		&lt;h3&gt;Some system properties&lt;/h3&gt;
	&lt;b&gt;java.class.version&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""java.class.version"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;java.class.path&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""java.class.path"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;java.library.path&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""java.library.path"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;java.vm.vendor&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""java.vm.vendor"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;file.separator:&lt;/b&gt; &lt;pre&gt;&lt;cms:info property=""file.separator"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;java.io.tmpdir&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""java.io.tmpdir"" /&gt;&lt;/pre&gt;&lt;br/&gt;
	&lt;b&gt;user.dir&lt;/b&gt;: &lt;pre&gt;&lt;cms:info property=""user.dir"" /&gt;&lt;/pre&gt;&lt;br/&gt;
&lt;/cms:contentload&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
As you can see in the code, i try two parameters that are not in the official documentation (at least in the examples) but I could see in the source code of the taglib. They are 'opencms.request.encoding' and 'opencms.request.locale'.

At the end of the jsp I try some java System properties, some of them I consider that they are more useful than the ones that opencms gives in those examples. Anyway, you can use as property anyone that you can retrieve by using the System.getProperty() method, you can check <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#getProperties()"" target=""_blank"">what are they for JAVA SE5</a>.

The following is the <strong>result</strong> I got when I made click on cmsinfo_probe1.jsp from my OpenCms explorer:
<h3>OpenCms Parameters</h3>
<strong>opencms.version:</strong>
<pre>7.5.2</pre>
<strong>opencms.url: </strong>
<pre>http://localhost:8080/opencms752/opencms/system/modules/probes/resources/pruebas/cmsinfo/cmsinfo_probe2.jsp</pre>
<strong>opencms.uri:</strong>
<pre>/opencms752/opencms/system/modules/probes/resources/pruebas/cmsinfo/cmsinfo_probe2.jsp</pre>
<strong>opencms.webapp</strong>:
<pre>opencms752</pre>
<strong>opencms.webbasepath</strong>:
<pre>C:optTomcat5.5webappsopencms752</pre>
<strong>opencms.request.uri</strong>:
<pre>/system/modules/probes/resources/pruebas/cmsinfo/cmsinfo_probe1.jsp</pre>
<strong>opencms.request.element.uri</strong>:
<pre>/system/modules/probes/resources/pruebas/cmsinfo/cmsinfo_probe2.jsp</pre>
<strong>opencms.request.folder</strong>:
<pre>/system/modules/probes/resources/pruebas/cmsinfo/</pre>
<h3>Non usual OpenCms Parameters</h3>
<strong>opencms.request.encoding</strong>:
<pre>ISO-8859-1</pre>
<strong>opencms.request.locale</strong>:
<pre>es</pre>
<h3>Some system properties</h3>
<strong>java.class.version</strong>:
<pre>49.0</pre>
<strong>java.class.path</strong>:
<pre>C:optTomcat5.5binbootstrap.jar;C:optTomcat5.5binojdbc14-10.2.0.3.jar</pre>
<strong>java.library.path</strong>:
<pre>C:optTomcat5.5bin;.;C:WINDOWSsystem32;C:WINDOWS;D:oracleproduct10.1.0Db_1bin;D:oracleproduct10.1.0Db_1jre1.4.2binclient;C:oracleapporacleproduct10.2.0serverbin;C:WINDOWSsystem32;C:WINDOWS;C:WINDOWSSystem32Wbem;C:WINDOWSsystem32nls;C:WINDOWSsystem32nlsESPANOL;C:Archivos de programaIntelDMIX;C:optjdk1.5.0_17bin;C:grailsbin;C:Archivos de programaTortoiseGitbin;C:Archivos de programaKaspersky LabKaspersky Anti-Virus 6.0 for Windows Workstations MP4</pre>
<strong>java.vm.vendor</strong>:
<pre>Sun Microsystems Inc.</pre>
<strong>file.separator:</strong>
<pre></pre>
<strong>java.io.tmpdir</strong>:
<pre>C:optTomcat5.5temp</pre>
<strong>user.dir</strong>:
<pre>C:optTomcat5.5</pre>
The results tell us that 'opencms.request.uri' returns the path to the page requested by the user and all other uri's and url's refers to the current jsp that executes the code.

The property 'opencms.request.folder' also refers to the folder of the page requested by the user, in the example it would be the 'cmsinfo_probe1.jsp' folder.

Hope this helps somebody!";"Openmcs cms:info tag explained";;"publish";"open";"open";;"openmcs-cmsinfo-tag-explained";;;"2011-03-31 18:35:50";"2011-03-31 17:35:50";;"0";"http://marquex.es/?p=362";"0";"post";;"0"
"387";"2";"2011-04-05 23:30:39";"2011-04-05 22:30:39";"The process of adding a button to the wordpress editor is straight enough if you follow the instructions that there is in the <a href=""http://codex.wordpress.org/TinyMCE_Custom_Buttons"" target=""_blank"">Wordpress Codex</a> and in the the<a href=""http://tinymce.moxiecode.com/wiki.php/Creating_a_plugin"" target=""_blank""> tinyMCE editor documentation</a>. The first one explain how to hook into Wordpress to define the name of your tinyMCE plugin and the path to the javascript that the editor calls. The second one define how to build that javascript.

Adding custom buttons to your editor is very useful when you are installing Wordpress for a client and he asks about some functionality inside the posts, that would be very easy if the client knew something about HTML, like add a class to a div. If you put a button that create a div with that class you don't have to explain any HTML to him, you just have to tell him ""push the button"", anyway he won't do it and he will call you asking ""how can I....?"" - Push the damn button!

But when I searched for adding a select box it wasn't easy to find the info in the tinyMCE documentation, so I decide to write a tutorial to never forget it.

<!--more U always wanted to know this, keep reading. -->

<a rel=""attachment wp-att-388"" href=""http://marquex.es/387/adding-a-select-box-to-wordpress-tinymce-editor/shortcode-selector""><img class=""aligncenter size-medium wp-image-388"" title=""shortcode-selector"" src=""http://marquex.es/wp-content/uploads/2011/04/shortcode-selector-570x235.jpg"" alt="""" width=""570"" height=""235"" /></a>

The plugin that we are going to create will let us insert the shortcodes that we have available in our wordpress easily. I always forget the shortcodes I have so, for me, it is really useful. Its behavior will be really simple:
<ul>
	<li>Selecting a shortcode from the select box will wrap any text that is selected in the editor with the shortcode tags: <code>[tag]Selected text[/tag]</code></li>
	<li>If there is not selected text a empty tag will be inserted <code>[tag]</code></li>
</ul>
Well, are you hungry of code? here you have the main wordpress plugin file, we will name it <strong>Shortcodes editor selector,</strong> and you can dowload it :
<h2 style=""text-align: center;""><a href=""http://marquex.es/wp-content/uploads/2011/04/shortcodes-editor-selector.zip"">Download Shortcodes editor selector</a></h2>
<h3>shortcodeseditorselector.php</h3>
<pre lang=""php"" line=""1"">
<?php
/*
Plugin Name: Shortcodes editor selector
Plugin URI: http://marquex.es/387/adding-a-select-box-to-wordpress-tinymce-editor
Description: Creates a button to the wordpress tinymce editor to add shortcodes easily.
Version: 0.1
Author: Javier Marquez 
Author URI: http://marquex.es
*/
if(!class_exists('ShortcodesEditorSelector')):

class ShortcodesEditorSelector{
	var $buttonName = 'ShortcodeSelector';
	function addSelector(){
		// Don't bother doing this stuff if the current user lacks permissions
		if ( ! current_user_can('edit_posts') && ! current_user_can('edit_pages') )
			return;
	 
	   // Add only in Rich Editor mode
	    if ( get_user_option('rich_editing') == 'true') {
	      add_filter('mce_external_plugins', array($this, 'registerTmcePlugin'));
	      //you can use the filters mce_buttons_2, mce_buttons_3 and mce_buttons_4 
	      //to add your button to other toolbars of your tinymce
	      add_filter('mce_buttons', array($this, 'registerButton'));
	    }
	}
	
	function registerButton($buttons){
		array_push($buttons, ""separator"", $this->buttonName);
		return $buttons;
	}
	
	function registerTmcePlugin($plugin_array){
		$plugin_array[$this->buttonName] = plugins_url() . '/shortcodes-editor-selector/editor_plugin.js.php';
		if ( get_user_option('rich_editing') == 'true') 
		 	var_dump($plugin_array);
		return $plugin_array;
	}
}

endif;

if(!isset($shortcodesES)){
	$shortcodesES = new ShortcodesEditorSelector();
	add_action('admin_head', array($shortcodesES, 'addSelector'));
}
</pre>
I copied the code from the codex page and I modified some things to adapt it to my necessities. The first thing I've changed is create a class that contains all the functions and attributes, this is the best thing to avoid conflicts with others plugins.

I have added a comment about how to change the toolbar button row where the selectbox will be.

To add a button to the tinyMCE toolbar we need to complete two steps:
<ul>
	<li>Register the tinyMCE plugin, a javascript that contains the behavior of the button. We get this with the <em>registerTmcePlugin</em> method that hooks into 'mce_external_plugins'. Here the path to the javascript has been changed from the example in Wordpress Codex, because we want our plugin to have all the files inside its folder, and the example tell us to put it inside the tiny_mce folder. Using the <code>plugin_url()</code> function it is easy to get to our plugin folder.</li>
	<li>Register the control into the tinyMCE. In Wordpress the hooks are called 'mce_buttons' and 'mce_buttons_n' where <em>n</em> is the tinyMCE toolbar we want to add our control, and I say control because it don't have to be always a button although the hook name seems to say that it do. We want to add a selectbox but we still have to hook into 'mce_buttons'.</li>
</ul>
Once we have our Wordpress plugin ready, we need to create the tinyMCE plugin, that tell the editor to draw a select box with the shortcodes. That plugin should be a javascript file, but we need the javascript to include the shortcodes list that only can be retrived using the Wordpress PHP functions, so what we are going to do is register a PHP file as the tinyMCE plugin (using the 'mce_external_plugins' hook) that write javascript code, this way the editor get a valid javascript file (it doesn't care about the .php extension) and our server will execute the PHP commands inside it.

Here is its code, copied and subtly modified from the <a href=""http://tinymce.moxiecode.com/wiki.php/Creating_a_plugin"" target=""_blank"">tinyMCE docs</a>:
<h3>editor_plugin.js.php</h3>
<pre lang=""php"" line=""1"">
<?php 
	require_once('../../../wp-load.php');
	require_once('../../../wp-admin/includes/admin.php');
	do_action('admin_init');
	
	if ( ! is_user_logged_in() )
		die('You must be logged in to access this script.');
	
	if(!isset($shortcodesES))
		$shortcodesES = new ShortcodesEditorSelector();
	
	global $shortcode_tags;
	$ordered_sct = array_keys($shortcode_tags);
	sort($ordered_sct);
?>

(function() {
	//******* Load plugin specific language pack
	//tinymce.PluginManager.requireLangPack('example');

	tinymce.create('tinymce.plugins.<?php echo $shortcodesES->buttonName; ?>', {
		/**
		 * Initializes the plugin, this will be executed after the plugin has been created.
		 * This call is done before the editor instance has finished it's initialization so use the onInit event
		 * of the editor instance to intercept that event.
		 *
		 * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
		 * @param {string} url Absolute URL to where the plugin is located.
		 */
		init : function(ed, url) {
			
		},

		/**
		 * Creates control instances based in the incomming name. This method is normally not
		 * needed since the addButton method of the tinymce.Editor class is a more easy way of adding buttons
		 * but you sometimes need to create more complex controls like listboxes, split buttons etc then this
		 * method can be used to create those.
		 *
		 * @param {String} n Name of the control to create.
		 * @param {tinymce.ControlManager} cm Control manager to use inorder to create new control.
		 * @return {tinymce.ui.Control} New control instance or null if no control was created.
		 */
		createControl : function(n, cm) {
			if(n=='<?php echo $shortcodesES->buttonName; ?>'){
                var mlb = cm.createListBox('<?php echo $shortcodesES->buttonName; ?>List', {
                     title : 'Shortcodes',
                     onselect : function(v) { //Option value as parameter
                     	if(tinyMCE.activeEditor.selection.getContent() != ''){
                         	tinyMCE.activeEditor.selection.setContent('[' + v + ']' + tinyMCE.activeEditor.selection.getContent() + '[/' + v + ']');
                        }
                        else{
                        	tinyMCE.activeEditor.selection.setContent('[' + v + ']');
                        }
                     }
                });

                // Add some values to the list box
                <?php foreach($ordered_sct as $sct):?>
                	mlb.add('<?php echo $sct;?>', '<?php echo $sct;?>');
		<?php endforeach;?>

                // Return the new listbox instance
                return mlb;
             }
             
             return null;
		},

		/**
		 * Returns information about the plugin as a name/value array.
		 * The current keys are longname, author, authorurl, infourl and version.
		 *
		 * @return {Object} Name/value array containing information about the plugin.
		 */
		getInfo : function() {
			return {
				longname : 'Shortcode selector',
				author : 'marquex',
				authorurl : 'http://marquex.es',
				infourl : 'http://marquex.es/387/adding-a-select-box-to-wordpress-tinymce-editor',
				version : ""0.1""
			};
		}
	});

	// Register plugin
	tinymce.PluginManager.add('<?php echo $shortcodesES->buttonName; ?>', tinymce.plugins.<?php echo $shortcodesES->buttonName; ?>);
})();

</pre>
In our script file, the first thing to do is initialize the Wordpress admin framework, that will let us to use all the wordpress admin functions and variables and we get it with the first 3 lines of code
<pre lang=""php"" line=""2"">
require_once('../../../wp-load.php');
require_once('../../../wp-admin/includes/admin.php');
do_action('admin_init');
</pre>
The next step is make the script accessible only to logged users, just for security.
<pre lang=""php"" line=""6"">
if ( ! is_user_logged_in() )
		die('You must be logged in to access this script.');
</pre>
Now that we have the access to everything we are going to get the shortcodes list, that Wordpress stores in the global variable <em>$shortcode_tags</em>, and we are going to sort it alphabetically, making it more user friendly. This variable is an associative array where each element is a shortcode. The key of the element is the tag name that we use in the editor, and the value is an object that represents the function necessary to convert the shortcode in the expected result. We only need the keys, the part we need to write in the editor.
<pre lang=""php"" line=""12"">
	global $shortcode_tags;
	$ordered_sct = array_keys($shortcode_tags);
	sort($ordered_sct);
</pre>
The rest of the file is the example from the documentation where the plugin name has been changed to ours and we added the code to set up our list. The select boxes for the tinyMCE are called <a href=""http://tinymce.moxiecode.com/wiki.php/API3:class.tinymce.ui.ListBox"" target=""_blank""><em>listBox </em></a>and they are easy to instantiate from inside the <em>createControl </em>method in a plugin. The function responsible of writing the shortcode are binded to the onselect event of the select box, this way we just have to click on the option we want to write it in the editor.

With<em> tinyMCE.activeEditor.selection.setContent </em>and <em>tinyMCE.activeEditor.selection.getContent </em>we get access to the text selected if there is any or otherwise the current position of the cursor.

To set the options for the select box, a little php will help us.

<pre lang=""php"" line=""59"">
                <?php foreach($ordered_sct as $sct):?>
                	mlb.add('<?php echo $sct;?>', '<?php echo $sct;?>');
		<?php endforeach;?>
</pre>

Finally, don't forget to add the plugin to the tinyMCE plugin manager if you want it to appear in your editor.
<pre lang=""php"" line=""87"">
	// Register plugin
	tinymce.PluginManager.add('<?php echo $shortcodesES->buttonName; ?>', tinymce.plugins.<?php echo $shortcodesES->buttonName; ?>);
</pre>
If you have get this bottom in the tutorial, I am sure you want to try the plugin. Create a folder named <em>shortcodes-editor-selector</em> in your /wp-content/plugins/ and copy both files there, then log in your Wordpress, activate the plugin and you will see the select box in your editor.

&nbsp;";"Adding a select box to Wordpress tinyMCE editor";;"publish";"open";"open";;"adding-a-select-box-to-wordpress-tinymce-editor";;;"2011-04-05 23:30:39";"2011-04-05 22:30:39";;"0";"http://marquex.es/?p=387";"0";"post";;"24"
"438";"2";"2011-04-15 16:51:13";"2011-04-15 15:51:13";"This is a problem that I have to deal with everyday at my job. We have some templates ""ready"" to display a 3 columns fluid layout and they were perfect until Google Chrome arrived, which displays the layout in a different way.

The idea is easy, we have two divs, one floating to the right and the other one, called container, makes the fluid part of the page. We don't want the elements of the fluid div to wrap the right column, so the container has a right margin with the same or higher width than the right column. Inside the container, we use the same tactics to get a left column.

<!--more Why Chrome? Why? Continue reading... -->

<pre lang=""php"" line=""1"">
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">
<html lang=""en"">
<head>
	<meta http-equiv=""Content-Type"" content=""text/html;charset=UTF-8"">
	<title>Chrome-Firefox differences</title>
	<style type=""text/css"">
		body {
			color: #fff;
		}
		#rightcol{
			float: right;
			width: 200px;
			background: green;
			height: 200px;
		}
		#leftcol{
			float: left;
			width: 200px;
			background: red;
			height: 250px;
		}
		#main{
			margin-left: 210px;
			background: blue;
			height: 200px;
		}
		#container{
			overflow: auto;
			margin-right: 210px;
			background: #ddd;
		}
	</style>
</head>
<body>
	<div id=""rightcol"">And last but not least, the right column.</div>
	<div id=""container"">
		<div id=""leftcol"">Hi, I'm the left column</div>
		<div id=""main"">I am the main content. Nice to meet you.</div>
	</div>
</body>
</html>
</pre>

<h3 style=""text-align: center;""><a href=""http://marquex.es/wp-content/demos/diferencias.html"" target=""_blank"">Try the demo by yourself</a></h3>

This way we have a fluid design that works ok except for one issue, the container will have the main div height even if the left column is taller than the main one. The fix for that issue is easy, we can add 'overflow:auto' or 'overflow:hidden' to the container, so it will realize it has a floating div inside and 'recalculate' its height. That is called create a new <a href=""http://www.w3.org/TR/CSS21/visuren.html#block-formatting"" target=""_blank"">block formatting context</a>, and it is very nice explained in the colinarts article <a href=""http://colinaarts.com/articles/the-magic-of-overflow-hidden/"" target=""_blank"">The magic of overflow hidden</a>.

On every browser it works as we would like, but on Chrome, adding the overflow:auto makes the container realize that have a floating div at its right too, and leave the right margin to the right column instead to the window border.
<h3>All browsers but Chrome</h3>
<a rel=""attachment wp-att-440"" href=""http://marquex.es/438/overflow-hidden-chrome-against-the-rest-of-browsers/diferenciasff""><img class=""aligncenter size-medium wp-image-440"" title=""Overflow hidden interpretation by Firefox"" src=""http://marquex.es/wp-content/uploads/2011/04/diferenciasff-570x201.png"" alt=""Overflow hidden interpretation by Firefox"" width=""570"" height=""201"" /></a>
<h3>Overflow hidden by Chrome</h3>
<a rel=""attachment wp-att-441"" href=""http://marquex.es/438/overflow-hidden-chrome-against-the-rest-of-browsers/diferencias""><img class=""aligncenter size-medium wp-image-441"" title=""Overflow hidden interpretation by Chrome"" src=""http://marquex.es/wp-content/uploads/2011/04/diferencias-570x201.png"" alt=""Overflow hidden interpretation by Chrome"" width=""570"" height=""201"" /></a>I could not find info about this case in the CSS docs, but I think that the new block formatting context should have effect only inside the 'overflow:hidden' div, not outside, so from my point of view, <strong>Chrome is doing it wrong</strong>. ¿What do you think?

Tested on: FF4, FF 3.6.16, Chrome 11.0.696.43, IE7, IE8, Opera 11.01";"Overflow hidden: Chrome against the rest of browsers";;"publish";"open";"open";;"overflow-hidden-chrome-against-the-rest-of-browsers";;;"2011-04-15 16:51:13";"2011-04-15 15:51:13";;"0";"http://marquex.es/?p=438";"0";"post";;"3"
"519";"2";"2011-05-18 16:19:18";"2011-05-18 15:19:18";"I've started to develop a new site in Opencms and this time I have free way to design it however I want, so I wanted to do something good looking.

The use of the CSS rule @font-face is not difficult, specially using the <a title=""Font face generator"" href=""www.fontsquirrel.com/fontface/generator"" target=""_blank"">@font-face generator from fontsquirrel.com</a>. You upload the font you want to use, and the generator transforms it in all the font formats that browsers use, and create a CSS code that you just to paste in your style file.

That way is how this blog is showing this beautiful typografy in its titles - WC Roughtrad by <a title=""Great free fonts"" href=""http://www.wcfonts.com/"" target=""_blank"">WCFonts</a>.

All this is very easy, but when I tried to do the same in the new Opencms site I realized that It wasn't working.
<p style=""text-align: center;""><!--more Discover my Opencms-fontface problem --><a rel=""attachment wp-att-520"" href=""http://marquex.es/519/fontface-opencms/opencmsff""><img class=""size-medium wp-image-520 aligncenter"" title=""opencmsff"" src=""http://marquex.es/wp-content/uploads/2011/05/opencmsff-300x300.jpg"" alt="""" width=""300"" height=""300"" /></a></p>
After 3 hours of looking for the reasons of the problem I finally found it: <strong>Opencms doesn't export the font files</strong>, but it behaves like if it does and my browser was trying to get them from
<pre>/opencms752/export/system/modules/mynewsite/resources/css/dayrom__-webfont.woff</pre>
That file didn't exist, but Opencms was returning a 303 error instead of the usual 404, so realizing that the files were missing took me some longer, since offline everything was working fine.

Once I understood the problem, I tried to export them from the Opencms admin area but I couldn't, so I finally copied them manually to the export folder of Opencms inside my Tomcat and... that was the solution.
Write the solution takes me less than five seconds - <strong>Copy the font files manually</strong> - but understanding what was happening was a nightmare.

I hadn't any problems then, but in my font-face investigation I read that some browsers have problems if the font mime-type is not correct, so if you want your Opencms not to serve your fonts as text/html, you will have to edit your opencms-vfs.xml, and add the following lines to the mimetipes section:
<pre>&lt;mimetype extension="".woff"" type=""application/x-font-woff""/&gt;
&lt;mimetype extension="".ttf"" type=""font/ttf""/&gt;
&lt;mimetype extension="".eot"" type=""application/vnd.ms-fontobject"" /&gt;
&lt;mimetype extension="".etf"" type=""font/etf"" /&gt;
</pre>
The svg extension is already in the file. Hope this helps!";"@font-face and Opencms";;"publish";"open";"open";;"fontface-opencms";;;"2011-05-18 16:19:18";"2011-05-18 15:19:18";;"0";"http://marquex.es/?p=519";"0";"post";;"1"
"541";"2";"2011-06-01 13:42:50";"2011-06-01 12:42:50";"<strong>Update - Check out the all new <a href=""http://premium.wpmudev.org/project/custom-sidebars-pro/"">Custom Sidebar Pro</a> for all your widget, sidebar and footer needs.</a></strong>

There have been a lot of people contacting me about the Custom Sidebars plugin, <strong>it has reached +20000 downloads</strong> already. Some of them have told me about a bug, others about some possible improvements... Thanks to you all, I will try to listen to everybody to make a useful plugin.

In case you don't know what this plugin does, Custom Sidebars allows a Wordpress administrator to create all the sidebars that he or she may need and assigns them to a post or page individually. It also permits you to assign custom sidebars to the home page, category archives, custom post types, author pages... Long story short, Custom Sidebars gives you the control over your site's sidebars.
<h3 style=""text-align: center;""><a title=""Download Custom Sidebars plugin from wordpress repository"" href=""http://wordpress.org/extend/plugins/custom-sidebars/"" target=""_blank"">Download Custom Sidebars plugin</a></h3>
<!--more Want to know what's new? Continue -->
<h3>What's new on version 0.8</h3>
<ul>
	<li>Category hierarchy is now handled properly, so if a post doesn't have a defined sidebar, it uses the one that belongs to its deepest level category and if it can't find a sidebar defined there, it will go up in the category hierarchy looking for it.</li>
	<li>Now you can set a sidebar for a custom post type post individually.</li>
	<li>The way that the plugin replaces sidebars has been improved, making the replacements really fast.</li>
	<li>There have been some improvements on the interface.</li>
	<li>Compatibility assured up to WP 3.2 beta 2.</li>
</ul>
[imagebrowser id=1]
<h3>Some tutorials to get started</h3>
<ul>
	<li><a href=""#ht1"">How to replace your default sidebar</a></li>
	<li><a href=""#ht2"">How to create a new sidebar</a></li>
</ul>
<h3 id=""ht1"">Quick how-to: Replace your default sidebar</h3>
[imagebrowser id=2]
<h3 id=""ht2"">Quick how-to: Create a new sidebar</h3>
[imagebrowser id=3] ";"Custom Sidebars Plugin v0.8";;"publish";"open";"open";;"custom-sidebars-plugin-v0-8";;;"2014-07-09 07:29:27";"2014-07-09 07:29:27";;"0";"http://marquex.es/?p=541";"0";"post";;"125"
"570";"2";"2011-06-15 16:18:41";"2011-06-15 15:18:41";"There is a famous rule out there called DRY (Don't repeat yourself), and if there is one thing I have to code once and again in Opencms is Structured Content lists and their pagination.I will postpone the DRY way explanation of making structured contents lists for any other day and I will explain how to write a reusable robust pagination mechanism for Opencms.

<!--more The whole explanation is in the second page... -->
<p style=""text-align: center;""><a rel=""attachment wp-att-573"" href=""http://marquex.es/570/easy-pagination-with-opencms/paginacion""><img class=""size-medium wp-image-573 aligncenter"" title=""paginacion"" src=""http://marquex.es/wp-content/uploads/2011/06/paginacion-570x129.jpg"" alt="""" width=""570"" height=""129"" /></a></p>
Imagine that we have a structured content for news, a folder full of news and a jsp that display a list of news in it. The list jsp code would be like:

<pre lang=""java"">
<cms:contentload collector=""allInFolder"" param=""%(opencms.request.folder)|news"">
	<h3>
	<a href=""<cms:link><cms:contentshow element=""%(opencms.filename)"" /></cms:link>"">
		<cms:contentshow element=""title"" />
	</a>
	</h3>
	<div class=""excerpt"">
		<cms:contentshow element=""excerpt"" />
	</div>
</cms:contentload>
</pre>

Since our folder is full of news, I mean really full: 1001 news items, we don't want to show all of them at the same time, we need to show 10 for page. To do so, the Opencms's <strong>contentinfo </strong>tag is really useful, so we are going to change our jsp in order to get this:

<pre lang=""java"">
<c:choose>
<c:when test=""${param.page > 0}"">
	<c:set var=""pagina"" value=""${param.page}"" />
</c:when> 
<c:otherwise>
	<c:set var=""pagina"" value=""1"" />
</c:otherwise>
</c:choose>	

<cms:contentload collector=""allInFolder"" param=""%(opencms.folder)|news"" pageSize=""10"" pageIndex=""${pagina}"" pageNavLength=""5"">
	<cms:contentinfo var=""info"" scope=""request"" /> 
	<h3>
	<a href=""<cms:link><cms:contentshow element=""%(opencms.filename)"" /></cms:link>"">
		<cms:contentshow element=""title"" />
	</a>
	</h3>
	<div class=""excerpt"">
		<cms:contentshow element=""excerpt"" />
	</div>
</cms:contentload>

<div id=""pagination"">
	<cms:include page=""pagination.jsp"" />
</div>
</pre>

We are going to retrieve the page number to show from a URL parameter, so we check that the parameter is set and is bigger than 0, otherwise we set it to 1. For this example we won't do further validations, but this one is mandatory to make it work.

As you can see there are three more attributes in the contentload that will be a key part of our pagination:
<ul>
	<li><strong>pageSize</strong>: How many news we are showing in one</li>
	<li><strong>page. pageIndex</strong>: The number of the page we want to display.</li>
	<li><strong>pageNavLength</strong>: This parameter will help us to create our pagination links, I'll write about it soon in this article.</li>
</ul>
Thanks to the <code>cms:contentinfo</code> tag that we have added, we have all the info we need to create our pagination links in a request attribute. Usually this attribute is stored in the page context, but as long as we want to be DRY, we are going to create the navigation links in a jsp appart so we can call it from any list jsp we may make.And what's that info that we got?? Here you have:
<ul>
	<li><strong>info.resultSize</strong>: How many news items do we have? In our example: 1001</li>
	<li><strong>info.pageSize</strong>: How many news items per page? In our example 10, as we said in the contentload attribute.</li>
	<li><strong>info.pageCount</strong>: How many pages of news we have? In our examle 101, 1001/10 = 100 pages with 10 news items each plus one more with 1 item.</li>
	<li><strong>info.resultIndex</strong>: What is the current item? Since we are using this data after the contentload loop, in our example this will always point to the last item of the current page, but if you use it inside the loop it will return the current item index.</li>
	<li><strong>info.pageIndex</strong>: What is the current page? We have set this parameter using the contentload attribute.</li>
	<li><strong>info.pageNavLength</strong>: How many navigation links we want to display? In our example we have 101 pages, but having 101 links would be too much for the user, so we will try to display just 5.</li>
	<li><strong>info.pageNavStartIndex</strong>: What is the first page to display in the navigation links? Imagine that we are showing the page 10, as long as we are showing 5 links, the first page link that the navigation will display would be the 8.</li>
	<li><strong>info.pageNavEndIndex</strong>: What is the last page to display in the navigation links? Imagine that we are showing the page 10, as long as we are showing 5 links, the last page link that the navigation will display would be the 12, so we will have 5 links: 8, 9, 10, 11, 12.</li>
</ul>
We have all the necessary to create the navigation links, so let's write our pagination.jsp:

<pre lang=""java"">
<%
//Store the info in the page Context
pageContext.setAttribute(""info"", request.getAttribute(""info""));

%>
<c:if test=""${info.resultSize > info.pageSize}"">

	<%-- Show the first page if it is not in navigation links --%>
	<c:if test=""${info.pageNavStartIndex > 1}"">
		<a class=""pagelink"" href=""<cms:link><cms:info property=""opencms.request.uri"" /></cms:link>?page=1"">1</a><span class=""pagdots"">&nbsp;...</span>
	</c:if>
	
	<c:forEach var=""i"" begin=""${info.pageNavStartIndex}"" end=""${info.pageNavEndIndex}"">
		<c:choose>
			<c:when test=""${(i == info.pageIndex) || (i == 1 && info.pageIndex == null)}"">										
				<a class=""currentpagelink"" href=""<cms:link><cms:info property=""opencms.request.uri"" /></cms:link>?page=<c:out value=""${i}"" />""><c:out value=""${i}""/></a>&nbsp;
			</c:when>
			<c:otherwise>
				<a class=""pagelink"" href=""<cms:link><cms:info property=""opencms.request.uri"" /></cms:link>?page=<c:out value=""${i}"" />""><c:out value=""${i}""/></a>&nbsp;
			</c:otherwise>
		</c:choose>
	</c:forEach>
	
	
	<%-- Show the last page if it is not in navigation links --%>
	<c:if test=""${info.pageNavEndIndex < info.pageCount}"">
			<span class=""pagdots"">...&nbsp;</span><a class=""pagelink"" href=""<cms:link><cms:info property=""opencms.request.uri"" /></cms:link>?page=<c:out value=""${info.pageCount}"" />""><c:out value=""${info.pageCount}"" /></a>
	</c:if>
	
</c:if>
</pre>

The code is so straight, first of all we want the navigation links to appear when there are several pages, if we only have one page we don't need the links:

<pre lang=""java"">
<c:if test=""${info.resultSize > info.pageSize}"">
</pre>

We also want to show the links to the first page and the last page always, so we check if they are in the 5 visible links and if they are not we add them prefixes or sufixed by ""..."".

<pre lang=""java"">
We also want to show the links to the first page and the last page always, so we check if they are in the 5 visible links and if they are not we add them prefixes or sufixed by ""..."".

<c:if test=""${info.pageNavStartIndex > 1}"">
	<a class=""pagelink"" href=""<cms:link><cms:info property=""opencms.request.uri"" /></cms:link>?page=1"">1</a><span class=""pagdots"">&nbsp;...</span>
</c:if>
...
<c:if test=""${info.pageNavEndIndex < info.pageCount}"">
		<span class=""pagdots"">...&nbsp;</span><a class=""pagelink"" href=""<cms:link><cms:info property=""opencms.request.uri"" /></cms:link>?page=<c:out value=""${info.pageCount}"" />""><c:out value=""${info.pageCount}"" /></a>
</c:if>
</pre>

The way to link to a page is adding the parameter ""page"" to the url. In a nice implementation we should check in our list jsp that the user is asking for a page that exists, this way we can avoid some <em>indexOutOfBoundExceptions</em>.

Here I leave the jsp file ready to download and use in your Opencms. Enjoy!

<h3 style=""text-align:center"" class=""download""><a href=""http://marquex.es/wp-content/uploads/2011/06/pagination.zip"" title=""Download pagination source for Opencms"">Download pagination source code</a></h3>";"Easy pagination with Opencms";;"publish";"open";"open";;"easy-pagination-with-opencms";;;"2011-06-15 16:18:41";"2011-06-15 15:18:41";;"0";"http://marquex.es/?p=570";"0";"post";;"1"
"625";"2";"2011-06-24 09:51:21";"2011-06-24 08:51:21";"My favourite IDE has a new version and Git native support is in its features. Why don't try <a title=""Download Eclipse Indigo"" href=""http://www.eclipse.org/downloads/"" target=""_blank"">Eclipse Indigo</a>?";"Tip: New Eclipse Indigo";;"publish";"open";"open";;"tip-new-eclipse-indigo";;;"2011-06-24 09:51:21";"2011-06-24 08:51:21";;"0";"http://marquex.es/?p=625";"0";"post";;"0"
"631";"2";"2011-07-05 17:03:33";"2011-07-05 16:03:33";"<strong>Update - Check out the all new <a href=""http://premium.wpmudev.org/project/custom-sidebars-pro/ ‎"">Custom Sidebar Pro</a> for all your widget, sidebar and footer needs.</a></strong>

Since yesterday we have a new stable version of our beloved WordPress, version 3.2 nicknamed Gershwin after a great jazz musician. It comes with a lot of nice features, a new brand administration area, huge performance improvements, security patches and bugs solved.

I've been trying the betas and RCs to be sure that Custom Sidebars is compatible but unfortunatelly the official version broke the sidebars selection on pages, because it fixed a misuse of the property ""publicly_queriable"" on custom post types that makes the pages be not ""publicly_queriable"" anymore. Since Custom Sidebars checked if the post type was publicly queriable to add the selection box to the edit form, it was completely dissapeared for much of you.

Anyway, everything can be fixed but death, so here you have a new version of the plugin that behaves as expected. Enjoy it.
<!--more To get the last version of the plugin, read the post... -->
<p style=""text-align: center;""><a rel=""attachment wp-att-634"" href=""http://marquex.es/631/custom-sidebars-updated-version-0-8-1/cswp32""><img class=""aligncenter size-medium wp-image-634"" title=""cswp32"" src=""http://marquex.es/wp-content/uploads/2011/07/cswp32-566x300.png"" alt="""" width=""566"" height=""300"" /></a></p>

<h3 style=""text-align: center;""><a title=""Wordpress custom sidebars plugin"" href=""http://wordpress.org/extend/plugins/custom-sidebars/"">Download Custom Sidebars v0.8.1</a></h3>
If you are lost and you don't know what is Custom Sidebars for, you should read the<a title=""Custom Sidebars Plugin v0.8"" href=""http://marquex.es/541/custom-sidebars-plugin-v0-8""> Custom Sidebars Explanation</a>.";"Custom Sidebars Updated: Version 0.8.1";;"publish";"open";"open";;"custom-sidebars-updated-version-0-8-1";;;"2014-07-08 07:26:51";"2014-07-08 07:26:51";;"0";"http://marquex.es/?p=631";"0";"post";;"4"
"639";"2";"2011-07-10 10:17:45";"2011-07-10 09:17:45";"I have decided to improve my skills creating WordPress themes, and the only thing I was sure is that I would need a theme framework in order to be organized and have a solid structure. After having a look at the main frameworks, the chosen one was <a href=""http://carringtontheme.com/"">Carrington</a>. The reason, you can get a quick idea of what it does, it acts like a proxy for template parts, so if you want your home page to have a different header, you just add a new file in the headers folder called home.php and Carrington pick it for you. You can almost forget about WordPress conditional tags and if statements and focus in developing.

But that does not always work. In my case, I wanted to have a static page as home of my site, to do so I went to <em>""Settings"" &gt; ""Reading""</em> on my WP backend and chose the page I wanted to be the home page. I also wanted a new header for this new home page, so I added the ""home.php"" file to my headers folder, but Carrington just ignored it.

<!--more A useful WordPress hack if you continue reading...-->

<a rel=""attachment wp-att-640"" href=""http://marquex.es/639/front-page-on-carrington-theme/carrington""><img class=""aligncenter size-medium wp-image-640"" title=""carrington"" src=""http://marquex.es/wp-content/uploads/2011/07/carrington-570x141.png"" alt="""" width=""570"" height=""141"" /></a>

Carrington only recognizes the home.php files as templates for your blog page, in case you want a different template for your front page you will need to create a new context. It sounds difficult, but you only will have to use this hack I leave here:
<pre lang=""php"">
<?php
add_filter('cfct_context', 'cfrontfix');
function cfrontfix($context){
	if(is_front_page())
		return 'front-page';
	return $context;
}
</pre>
You can add the code to your functions.php file or create a new file under the Carrington's plugin folder. Once done it, you can add files called front-page.php to your theme, and they will be picked properly.

&nbsp;";"Front page on Carrington theme";;"publish";"open";"open";;"front-page-on-carrington-theme";;;"2011-07-10 10:17:45";"2011-07-10 09:17:45";;"0";"http://marquex.es/?p=639";"0";"post";;"1"
"668";"2";"2012-04-19 18:50:27";"2012-04-19 17:50:27";"This is my last dumb project which allows to trolling everybody, everywhere, writing whatever you want to say in a captcha:
<h3 style=""text-align: center;""><a title=""Personalize your captcha and download it"" href=""http://yourcaptcha.com"" target=""_blank"">Your Captcha Creator: yourcaptcha.com</a></h3>
I tried to make it as simple as possible, just write down your worst feelings in the input bar and press enter. If you like your creation press the down key to download your captcha.

<!--more Create your own captcha...-->

<img class=""aligncenter size-full wp-image-670"" title=""Marquex rulez captcha"" src=""http://marquex.es/wp-content/uploads/2012/04/marquexr2.jpg"" alt="""" width=""484"" height=""96"" />

This is a new resource for designers that want to play with captchas, or for people who want to send a special message to their friends.

The page is made using HTML5, CSS3, it has a responsive design, keyboard navigation and integrates facebook and twitter easily. Moreover, it was created from the begining for touch devices, so it has big icons to make confortable create captchas using your iPad.

If you like yourcaptcha.com, send me a captcha message via <a title=""Javimarque on facebook"" href=""http://www.facebook.com/pages/javimarque/138581312874359"" target=""_blank"">facebook</a>!";"Get your captcha personalized";;"publish";"open";"open";;"get-your-captcha-personalized";;;"2012-04-19 18:50:27";"2012-04-19 17:50:27";;"0";"http://marquex.es/?p=668";"0";"post";;"0"
"679";"2";"2012-04-27 17:39:03";"2012-04-27 16:39:03";"You are a great person who knows how much effort is necessary to develop a plugin like Custom Sidebars! Not many people donate, but some like you make opensource developers feel like their work is worthy.

In appreciation of your donation past";"Thanks for your donation!";;"private";"open";"open";;"thanks-for-your-donation";;;"2012-04-27 17:39:03";"2012-04-27 16:39:03";;"0";"http://marquex.es/?p=679";"0";"post";;"0"
"698";"2";"2012-05-08 03:26:46";"2012-05-08 02:26:46";"<strong>Update - Check out the all new <a href=""https://premium.wpmudev.org/project/custom-sidebars-pro/"">Custom Sidebar Pro</a> for all your widget, sidebar and footer needs.</strong>

Finally a mayor release, <a title=""Custom sidebars wordpress page"" href=""http://wordpress.org/extend/plugins/custom-sidebars"" target=""_blank""> Custom Sidebars 1.0 is out</a>! It has a lot of improvements, specially AJAX management. But AJAX relies on javascript, and becouse of that only WP3.3 installations could run the new version of Custom Sidebars.
<h4 style=""text-align: center;"">So if your Wordpress is older than 3.3 DO NOT UPGRADE YOUR PLUGIN.</h4>
If you already did, just <a title=""Custom sidebars versions"" href=""http://wordpress.org/extend/plugins/custom-sidebars/download/"" target=""_blank"">downloading the version 0.8.2</a> everything should return to normal.

I really would like to explain all the improvements slowly, so I will take my time to update this post, until then, feel free to leave a message.

&nbsp;";"Custom Sidebars 1.0";;"publish";"open";"open";;"custom-sidebars-1-0";;;"2014-07-09 07:34:38";"2014-07-09 07:34:38";;"0";"http://marquex.es/?p=698";"0";"post";;"75"
"703";"2";"2012-07-05 17:55:47";"2012-07-05 16:55:47";"There is something about Google that has always annoyed me, the links in the black upper bar. That bar couldbe really useful, I remember when I had a link to Google Reader in it, what a beautiful time!! But some day Google decided that there are more interesting things to show in that bar, like Google Play that I have never used, and they don't let me configure the bar to bring my beloved Reader back.

<!--more-->

<a href=""#""><img class=""aligncenter size-medium wp-image-704"" title=""+Yyo Gbar logo"" src=""http://marquex.es/wp-content/uploads/2012/07/logo920-405x300.jpg"" alt="""" width=""405"" height=""300"" /></a>

That's the reason why I ended up creating a little Chrome extension to sort the Google bar and bring back useful links from Google which have been exiled to the More menu or further away.

+You Gbar adds a configuration menu to the Google pages that let you add, sort or remove the links from the Google bar easily, just by dragging and dropping.

<img class=""aligncenter size-medium wp-image-705"" title=""pantalla2"" src=""http://marquex.es/wp-content/uploads/2012/07/pantalla2-480x300.jpg"" alt="""" width=""480"" height=""300"" />

In seconds you will have the bar that you need instead of the bar where Google promotes its last products. How nice!! +You Gbar also stores a different sidebar for differents Google users, so it can be useful for several people using the same Chrome.

So what are you waiting for increase your productivity?
<h3 style=""text-align: center;""><a title=""Download +You Google Bar Chrome Extension"" href=""https://chrome.google.com/webstore/detail/pdkohnefnbiiijjpjcefmfbeopbcflep"" target=""_blank"">Download +You Gbar Extension</a></h3>";"+You Google Bar: Customize it!";;"publish";"open";"open";;"you-google-bar-customize-it";;;"2012-07-05 17:55:47";"2012-07-05 16:55:47";;"0";"http://marquex.es/?p=703";"0";"post";;"12"
"716";"2";"2012-09-18 19:44:58";"2012-09-18 18:44:58";"The chrome extension +You Gbar is becoming famous quickly, and in one week more than 5k people have downloaded it. In case you don't know about it, the extension lets you personalize the order of the Google Black Bar which you can find in every google service page, sorting its elements by dragging and dropping.

The firefox version is already finished, but the mozilla extension directory has stricter conditions to let the plugins be published than chrome's one. We must be patient...";"+You Google Bar: Firefox soon";;"publish";"open";"open";;"you-google-bar-firefox";;;"2012-09-18 19:44:58";"2012-09-18 18:44:58";;"0";"http://marquex.es/?p=716";"0";"post";;"3"
"719";"2";"2012-09-24 17:50:49";"2012-09-24 16:50:49";"Today I was searching the internet looking for a HTTP client that supports authentication and https connections because I couldn't use the function
<pre>file_get_contents</pre>
with htpps addresses.

I found some interesting and modern projects like <a title=""Httpful client home page"" href=""http://phphttpclient.com/"" target=""_blank"">Httpful </a>and <a title=""Guzzle http client homepage"" href=""http://guzzlephp.org/"" target=""_blank"">Guzzle</a>, but they created with REST in mind, and I was looking for something much simpler, but powerful enough to allows to get https pages and authentication.

And searching a bit deeper I could finally find <a title=""Requests php http client homepage"" href=""http://requests.ryanmccue.info/"" target=""_blank"">Requests</a>. Yeah, with that name it's really difficult to find it, everyting is called request on the internet. What I found is a Http client for PHP created by Ryan McCue, inspired by the python's Requests library.

<!--more Click to discover the magic -->

<img class=""aligncenter size-medium wp-image-721"" title=""https-background"" src=""http://marquex.es/wp-content/uploads/2012/09/https-background-399x300.jpg"" alt="""" width=""399"" height=""300"" />

Requests uses cURL and fsockopen, depending on what your system has available, but abstracts all the nasty stuff out of your way, providing a consistent API. Long story short, make easy to get http/https pages from your php scripts. Using it, getting a secure webpage as https://www.google.com is as easy as:
<pre lang=""php"">// First, include Requests
include('/path/to/library/Requests.php');

// Next, make sure Requests can load internal classes
Requests::register_autoloader();

//get the page
$response = Requests::get('https://www.google.es');</pre>
It does not matter if your php installation doesn't have the openssl wrapper installed, that one that let's you get the pages using the file_get_contents function. Requests will find it way to get the page for you.

But I had another problem, and I could not find info in the internet about: How to get those pages through my office's proxy?? I found a solution by myself, and I am glad to share it :)

As I said before, Requests can use cURL to get the pages, so we can config cURL to handle the proxy for us. Unfortunately, Requests don't give any simple way to pass config parameter to cURL, so we will have to extend the cURL transport class to set it up, and force Requests to use it. The result is this piece of code
<pre lang=""php"">require_once '/path/to/library/Requests.php';
Requests::register_autoloader();
//Our class
class Options_Curl_Transport extends Requests_Transport_cURL {
  var $options = array(
    CURLOPT_PROXY => 'fakeproxy.com:1080',
    CURLOPT_PROXYUSERPWD=> 'user:password'
  );
  function __construct(){
    parent::__construct();
    foreach($this->options as $key => $val)
		curl_setopt($this->fp, $key, $val);
  }
}
$response = Requests::get($url, array(), array('transport' => 'Options_Curl_Transport'));</pre>
This way I could, after hours of research, get my https pages through a proxy. I hope this make your resarch time much shorter. Go try <a title=""Requests php http client"" href=""http://requests.ryanmccue.info/"" target=""_blank"">Requests library</a>!";"Getting https pages through a proxy using PHP and Requests";;"publish";"open";"open";;"getting-https-prox-using-php-requests";;;"2012-09-24 17:50:49";"2012-09-24 16:50:49";;"0";"http://marquex.es/?p=719";"0";"post";;"0"
"727";"2";"2012-10-19 12:34:05";"2012-10-19 11:34:05";"If you use a spanish keyboard and the outstanding editor sublime text 2, you will find press the } key really annoying, because you will get a block comment code instead the } character which it is used ""sometimes"" when programming.

To fix that just open <em>Preferences &gt; Key Bindings - User menu.</em> That will open a file, there you need to paste the line below inside the [] brackets and save it. You will be able to use } again.
<pre>{ ""keys"": [""ctrl+alt+/""], ""command"": ""insert"", ""args"": {""characters"": ""}""}}</pre>
(Spanish) Si empiezas a usar sublime text 2, un editor de código bastante recomendado, para programar con un teclado español, te habrás dado cuenta que cuando pulsas la tecla }, lo que llamamos cerrar la llave y que es bastante útil, en la apantalla aparece un bloque de comentario en vez del símbolo. Para que la tecla funcione correctamente, simplemente tienes que ir al menú <em>Preferences &gt; Key Bindings - User menu </em>y en el archivo que se te abre escribir la linea de arriba entre los corchetes []. Una vez guardado, la tecla volverá a funcionar como debería.";"Restoring } key in sublime text for spanish keyboards";;"publish";"open";"open";;"restoring-key-in-sublime-text-for-spanish-keyboards";;;"2012-10-19 12:34:05";"2012-10-19 11:34:05";;"0";"http://marquex.es/?p=727";"0";"post";;"1"
"730";"2";"2012-10-19 12:59:57";"2012-10-19 11:59:57";"If you don't want to wait 5 minutes every time you launch your ide, give <a title=""Sublime Text 2 Editor home page"" href=""http://www.sublimetext.com/2"" target=""_blank"">Sublime Text 2</a> a try. Code completion, debug, control version... everything is possible and faster.";"Tip: Lightweight and cool PHP IDE";;"publish";"open";"open";;"tip-lightweight-and-cool-php-ide";;;"2012-10-19 12:59:57";"2012-10-19 11:59:57";;"0";"http://marquex.es/?p=730";"0";"post";;"2"
"734";"2";"2012-11-01 17:18:26";"2012-11-01 16:18:26";"Having <a title=""Xampp lite web server homepage"" href=""http://www.apachefriends.org/en/xampp-windows.html#646"" target=""_blank"">xampp lite</a> and <a title=""Sublime text 2 editor homepage"" href=""http://www.sublimetext.com/2"" target=""_blank"">sublime text</a> (portable install) in your <a title=""Dropbox cloud storage"" href=""https://www.dropbox.com/"" target=""_blank"">dropbox</a> folder makes you have your PHP development enviroment up to date in every computer you want.";"Tip: Portable workspace";;"publish";"open";"open";;"tip-portable-workspace";;;"2012-11-01 17:18:26";"2012-11-01 16:18:26";;"0";"http://marquex.es/?p=734";"0";"post";;"0"
"738";"2";"2012-10-20 17:45:47";"2012-10-20 16:45:47";"Bored of rectangular backgrounds? You are right, squared divs are boring but you don't like rounded corners anymore and need something special like this?
<style> .nonrectangular{ font-size:2em; width:300px; margin:0 auto; position:relative; color:#fff; text-align:center; padding:10px; } .nonrectangular:before{ content: "" ""; width:100%; height:100%; display:block; background:#276E33; position:absolute; z-index:-1; -webkit-transform: perspective(150px) rotate3D(0.5,-0.3,0.7,3deg) translate(-10px,-10px); -moz-transform: perspective(150px) rotate3D(0.5,-0.3,0.7,3deg) translate(-10px,-10px); transform: perspective(150px) rotate3D(0.5,-0.3,0.7,3deg) translate(-10px,-10px); -ms-transform: rotate(5deg) translate(10px); } </style>
<div class=""nonrectangular"">This is a nice div with a non rectangular background!</div>
Then, you have reached the right place!

<!--more Discover this nice trick...-->

This nice effect is obtained using the new <a href=""http://www.w3schools.com/cssref/css3_pr_transform.asp"">CSS 3D transform</a>, so no every browser will render this example properly, you won't see the example correctly if you don't use:
<ul>
	<li>Chrome 12+</li>
	<li>Firefox 10+</li>
	<li>Internet Explorer 10+</li>
	<li>Safari 4+</li>
</ul>
<h3>Creating a background layer</h3>
The first thing to do is creating a background which can be rotable or transformable without change the proportions of the actual div. We can get it using the <em>:before</em> selector, this will be our HTML:
<pre lang=""html"">
<div class=""nonrectangular"">
This is a nice div with a non rectangular background!
</div></pre>
And our base css:
<pre lang=""css"">.nonrectangular{ position:relative } 
.nonrectangular:before{ 
 content: "" ""; 
 width:100%; 
 height:100%; 
 background:#ccc;
 position:absolute;
 z-index:-1; 
}</pre>
Using <em>.nonrectangular:before</em> we create a virtual empty div with the same width and height inside the actual div. Making it absolute positioned, and its parent relative, we force our browser to redraw the <em>before </em>layer and it will visible, placed in the top left of the .<em>nonrectangular </em>div. The negative <em>z-index</em> property set our background layer up!
<h3>Setting the shape of the background</h3>
There is no way of making a non-paralelogram polygon using just 2D transformations, to obtain that great effect we need to add some perspective to our background. Currently, only Firefox (version 16) uses css transformations without vendor prefixes, so it is needed to add several rules to get a crossbrowser result:
<pre lang=""css"">
.nonrectangular:before{ 
 -webkit-transform: perspective(150px) rotate3D(0.5,-0.3,0.7,3deg); 
 -moz-transform: perspective(150px) rotate3D(0.5,-0.3,0.7,3deg);
 transform: perspective(150px) rotate3D(0.5,-0.3,0.7,3deg);
 -ms-transform: rotate(5deg) translate(-10px);
}</pre>
Different shapes can be obtained changing the values of the <em><a href=""http://www.eleqtriq.com/2010/05/understanding-css-3d-transforms/"">rotate3D</a></em> property, so just play a little bit with them! The last rule is for IE9, which doesn't support 3D transformations but 2D, so we can rotate the background in order to give some nice effect using IE9 too.

If you want to play a little with this background trick here you have a <a href=""http://jsfiddle.net/zF333/2/"">jsfiddle</a>.";"CSS3 Non rectangular backgrounds";;"publish";"open";"open";;"css3-non-rectangular-backgrounds";;;"2012-10-20 17:45:47";"2012-10-20 16:45:47";;"0";"http://marquex.es/?p=738";"0";"post";;"0"
"763";"2";"2012-11-11 12:04:43";"2012-11-11 11:04:43";"It's easy to find how to remove the initial title and controls in your youtube embeds. You just need to append
<pre>&amp;showinfo=0</pre>
to the youtube url. WordPress has a nice feature that embeds video links automatically, so you don't need to handle messed html code, but that embed show the video title too.

<!--more Click to discover the trick -->

To make WordPress to embed a youtube video without the title add this function to your theme's functions.php file
<pre class=""lang:php decode:true crayon-selected"">function remove_youtube_controls($code){
	if(strpos($code, 'youtu.be') !== false || strpos($code, 'youtube.com') !== false){
		$return = preg_replace(""@src=(['\""])?([^'\""&gt;s]*)@"", ""src=$1$2&amp;showinfo=0&amp;rel=0"", $code);
		return $return;
	}
	return $code;
}

add_filter('embed_handler_html', 'remove_youtube_controls');
add_filter('embed_oembed_html', 'remove_youtube_controls');
</pre>
The rel=0 attribute removes the related videos when the player stops. Enjoy!";"Removing Youtube embed title in WordPress automatically";;"publish";"open";"open";;"removing-youtube-embed-title-in-wordpress-automatically";;;"2014-08-09 13:54:33";"2014-08-09 13:54:33";;"0";"http://marquex.es/?p=763";"0";"post";;"0"
"842";"1";"2014-01-11 12:42:43";"2014-01-11 12:42:43";"WordPress 3.8 has arrived and it brings with it a new admin interface. Its name is MP6 and it follows the design trends: simple, clear and flat. This is good news for everybody, but for plugin developers implies updating their plugins' styles to adapt to the new UI.

<!--more-->

<a href=""http://arqex.com/wp-content/uploads/2014/01/mp6.png""><img class=""alignnone size-full wp-image-843"" alt=""mp6"" src=""http://arqex.com/wp-content/uploads/2014/01/mp6.png"" width=""839"" height=""414"" /></a>

Fortunatelly, there are no radical changes in the admin markup or classes, but if you need to update something, you need to be sure that you are supporting the previous versions of WordPress (Think about the people that can't update their blogs).

Bad news are that in the new UI there is nothing that we can use to recognize if the user WP has the MP6 or the old UI via css. Although we have the WP version and branch in the body classes, it is not good using them to apply our styles, because we would need to update our styles every time that a new WP version is released.

Our solution would be detect if the user has a WP version 3.8 or newer via PHP and add a new class to the admin body. The code is easy
<pre>function checkMP6($classes){
	global $wp_version;

	if ( !version_compare( $wp_version, '3.8', '>=' ) ) {
        $classes .= 'no-mp6';
    }
    return $classes;
}
add_filter('admin_body_class', 'checkMP6');</pre>
That will add the class <em>no-mp6</em> to the WP admin body if its version is lower than 3.8. Since WP is going to have the MP6 admin UI for a while, it is better to consider to tweak you CSS for the previous versions using the CSS <em>.no-mp6</em> class and keep styling your plugin as usual for MP6 (no css prefixes).";"Updating your WordPress plugins for the new MP6 admin";;"publish";"open";"open";;"updating-your-wordpress-plugins-for-the-new-mp6-admin";;;"2014-01-13 17:34:54";"2014-01-13 17:34:54";;"0";"http://arqex.com/?p=842";"0";"post";;"0"
"853";"1";"2014-03-29 10:53:27";"2014-03-29 10:53:27";"In case you don't know, or you are starting with javascript, there is a method in the Function prototype called <strong><em>bind</em></strong> that, once you start, you will never stop using it. This method was added in ES5 (so if you are developing for IE &lt; 9, I recommend to have a look at the <a href=""http://underscorejs.org/#bind"" title=""Underscore bind polyfill"" target=""_blank"">underscore polyfill</a>) and let the developer define what the object <strong><em>this</em></strong> will be inside the function. Here it is an example:

 
<pre class=""lang:js decode:true "" title=""Function bind example"" >var f = function(){
    console.log(this.toString());
}

var bound = f.bind('bind');

bound(); // bind</pre> 

On the other hand, there are two old javascript friends, <strong><em>call</em></strong> &amp; <strong><em>apply</em></strong> Function methods, which execute the function and also can customize the context of execution, allowing to define the <strong><em>this</em></strong> object when it is given as their first argument:
 
<pre class=""lang:js decode:true "" >var f = function(){
    console.log(this.toString());
}

f.apply('apply', []); // apply
f.call('call'); // call</pre>

So far so good, but there is a situation where the behaviour of these functions is not that clear. What would happen if the call or apply methods are used on a already bound function? Let's find out...
 
<pre class=""lang:js decode:true "" title=""bind vs apply and call example"" >var f = function(){
    console.log(this.toString());
}

var a = 'apply',
    b = 'bind',
    c = 'call'
;

var bound = f.bind(b);

bound(); // bind

f.apply(a, []); // apply
f.call(c); // call

bound.apply(a, []); // bind
bound.call(c); // bind</pre> 


Want to try it? here you have the <a title=""Function bind is more powerful than call or apply"" href=""http://jsfiddle.net/marquex/BcvE6/1/"" target=""_blank"">bind vs call &amp; apply jsfiddle</a>.

Yes, <strong>bind has won</strong>! I would have bet for call &amp; apply because they are executed after bind, but it seems like a bound function is always executed with the given <em>this </em>parameter. From now on, I will <strong>be careful when using call &amp; apply, they don't always use the <em>this </em>object passed as argument</strong>.";"Javascript function context: bind vs call & apply";;"publish";"open";"open";;"javascript-function-bind-vs-call-apply";;;"2014-03-29 12:08:50";"2014-03-29 12:08:50";;"0";"http://arqex.com/?p=853";"0";"post";;"2"
"863";"1";"2014-05-02 22:17:52";"2014-05-02 22:17:52";"I have been playing guitar for long time now, and there has been something that I always wanted: <strong>make guitar videos on youtube go slower</strong> to see clearly how some piece is played. Now that most of the video sites use html5 video tags to render their videos, playing them in slowmotion is a piece of cake.

I have created a bookmarklet to everyone who needs the same:

<!--more-->

<a href=""javascript:(function(){var v = document.querySelector('video');v.playbackRate = v.playbackRate == .5 ? 1 : .5;})()"">Slow motion video</a>

Just drag the link above and drop it on your bookmark bar, visit youtube or vimeo start a video and click on it. That's it, you should be watching your video at half of the original speed.
<h3>Looks great. How does it work?</h3>
Nowadays browser let the developer take the controls of how to display videos thanks to the &lt;video&gt; tag. That tag offers you an API to play, pause and seek video moments. And also there are a property called <strong>playbackRate</strong> to control the playback speed.

So the bookmarklet just fetch the video tag from the DOM and change the playbackRate value to 0.5
 
<pre class=""lang:js decode:true"" title=""Slow motion video scriptlet"" >(function(){
	var v = document.querySelector('video');
	v.playbackRate = v.playbackRate == .5 ? 1 : .5;
})();</pre> 

As you can see, hitting the bookmark again will restore the playbackRate value to 1. Set values lower that 1 to play the video slower and bigger than 1 to play it faster. It is possible even to set negative values to play the video backwards.

For playbackRate values lower than 0.5 the sound is muted.

It is needed that the video is served in HTML5 format (default for most of browsers), otherwise it won't work.

If you want to know more from the HTML5 video API, have a look at <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML5_audio_and_video"" title=""HTML5 video API"" target=""_blank"">Mozilla's docs</a>.";"Slow motion youtube videos";;"publish";"open";"open";;"slow-motion-youtube-videos";;;"2014-05-02 22:17:52";"2014-05-02 22:17:52";;"0";"http://arqex.com/?p=863";"0";"post";;"1"
"874";"1";"2014-05-21 10:23:41";"2014-05-21 10:23:41";"Using the same code in the browser and in the server is something that every developer dream of. The solution of that problem is known as the <strong>Holy Grail</strong> of javascript and there are different approaches to trying to get it. Probably we will be much closer to find the Grail when <a href=""http://www.2ality.com/2013/07/es6-modules.html"" target=""_blank"">ECMAScript 6 modules</a> are supported by every browser, but until that day, people try to find their ways to reuse as much as possible.

A lot of developers are using the awesome tool <strong><a href=""http://browserify.org/"" target=""_blank"">Browserify</a> </strong>nowadays to make node modules work in the browser. Browserify is great, and I think that the way of requiring modules in a Node way is much cleaner than the one used in the browser by AMD modules. But it needs to 'compile' the node source code to a browser version in order to be used in the client side, so actually it is not the same code that runs in the server.<!--more-->

Currently it is not possible to require scripts in a CommonJS style (node style) in the browser
<pre class=""lang:js decode:true"">var module = require('mymodule.js');</pre>
because the script execution can't be halted until the module is ready to use it. That is why Browserify needs to transform the code to be used by the client.

On the other hand, browser javascript modules are defined using the <strong><a href=""https://github.com/amdjs/amdjs-api/wiki/AMD"" target=""_blank"">AMD notation</a></strong> (for example, <strong>the ones used by <a href=""http://requirejs.org/"" target=""_blank"">require.js</a></strong>) and Node.js would be perfectly able to load the modules with a defined in that way.
<pre class=""lang:js decode:true"">require('mymodule.js', function(module){
//use your module here
});</pre>
<h2> Introducing AMDrequire</h2>
<strong><a href=""https://github.com/arqex/amdrequire"" target=""_blank"">AMDrequire</a> </strong>is a npm package that makes Node.js able to load AMD modules like if they were native Node modules. Let's say we have the following require.js module in <strong>mymodule.js</strong>
<pre class=""lang:js decode:true"" title=""mymodule.js"">define([],function(){
  return 10;
});</pre>
Using <strong>AMDrequire</strong> it is possible to load it in your Node.js the way it would be loaded in the browser:
<pre class=""lang:js decode:true"">require(['./mymodule.js'], function(ten){
  console.log(ten + 10); //Outputs 20 in the Node.js console.
});</pre>
That means that all the modules written for require.js are suddenly available for their use in Node.js. Isn't it great? And the best part of it that there is no need to modify one line of code, <strong>the same exact code is being reused by the client and the server</strong>.

And what is even better, <strong>you can still use Node.js modules as usual</strong>, requiring them in a synchronous way.

Notice that <strong>AMD modules are loaded using require.js notation, with an array as the first parameter</strong> (named define are not supported yet), and <strong>Node modules are loaded using standard Node.js notation, with the path or name string as the first parameter</strong>.
<pre class=""lang:js decode:true"">var module = require('mymodule.js');</pre>
<h2>How can I use AMDrequire?</h2>
AMDrequire is available as NPM package, so, to use it, the first thing to do is add it to your project
<pre class=""lang:default highlight:0 decode:true"">npm install amdrequire</pre>
Then, make it the first require in your application's entry file
<pre class=""lang:js decode:true"">require = require('amdrequire');</pre>
Once this is done, it is possible to<strong> load AMD modules in any of the application files</strong>. Also it is possible to create modules with the <code>define</code> method to be used in the server and the client.
<h2>Configuring AMDrequire</h2>
To make the configuration easier, AMDrequire can directly receive require.js configuration object to use the same named requires than the client.
<pre class=""lang:js decode:true"">require = require('amdrequire');
require.config({
    paths: {
        'world': 'somedir/world'
    }
    basePath: __dirname + '/public/assets/js',
    publicPath: __dirname + '/public'
});</pre>
As it is seen in the example, the <code>config</code> method accepts almost the same parameters of require.js one. <strong>That method is only available in the require object returned when amdrequire is loaded</strong>. There are two different parameters :
<ul>
	<li><strong>basePath</strong>:  It is equivalent to require.js <code>baseUrl</code> option, so it should point to the local path of that URL. All the relative paths used in AMD's require and define calls, that don't start with <code>./</code> or <code>../</code> will be relative to this directory. In the example, the <em>world</em> module should be in <code>__dirname + '/public/assets/js/somedir/world.js'</code> .</li>
	<li><strong>publicPath</strong>: Defines the path of the root URL directory. In the browser it is possible to require modules using root routes, they start with a slash <code>/like/route/from/the/root</code> and they are relative to the domain URL. <code>publicPath </code> tells what is the equivalent to that <code>/</code>  route to AMDrequire, so it can handle that kind of requires.</li>
</ul>
<h2> Want to collaborate?</h2>
AMDrequire is a young module, so any help in its development would be great. In the <a href=""https://github.com/arqex/amdrequire"" target=""_blank""><strong>AMDrequire git page</strong></a> it is possible to find deeper documentation and some suggestions on what to improve, and of course, any comment is really welcome.";"Reusing require.js modules in Node.js";;"publish";"open";"open";;"reusing-require-js-modules-node-js";;;"2014-05-21 10:28:02";"2014-05-21 10:28:02";;"0";"http://arqex.com/?p=874";"0";"post";;"2"
"900";"1";"2014-06-21 13:32:21";"2014-06-21 13:32:21";"Events are old friends when we talk about javascript, and I think that I am not wrong if I say that you are not good at client javascript if you don't master how DOM events work. They are really helpful to handle the asynchronous nature of a web application, and that's why some libraries like jQuery and Backbone make an intensive use of custom events as a mechanism of communication among different parts of a web application.

The most used event in jQuery is the 'document ready' one, and from my point of view that<em> ready type</em> of events are kind of special ones. Those events are triggered when some data turns available, and if you try to listen to those events after they have been triggered, you will wait forever, even if the data is already there to be used.

That is not an unusal scenario when you load your files asynchronously, so, for some time, I have been using what I call <strong>permanent events</strong> to handle this problem.

<!--more-->
<h2>Introducing permanent events</h2>
What I needed was a kind of event that I can bind new listeners once it has been triggered, being sure that those listeners will be called. So something like following code would work great
<pre class=""lang:js decode:true"">object.trigger('ready');
object.on('ready', function(){
	// This will print 'It is ready' in the console
	// even if the listener has been added after the 
	// event triggering.
	console.log('It is ready'); 
});</pre>
That means that, in the future, I can load new files and they will be able to ask safely if the object is ready just adding a listener to the event.

This behaviour is quite similar to <a title=""Promises in ECMAScript 6"" href=""http://www.html5rocks.com/en/tutorials/es6/promises/"" target=""_blank"">the way the promises work</a>, once they are fulfilled any callback attached to them will be inmediately called. Using permanent events you can forget about promise objects and all the boilerplate code you need to handle them.

<em>Note: I think promises are great and permanent events aren't a general replacement for them, but an agile way of handling that 'data ready' situation.</em>
<h2>Building permanent events for Backbone.js</h2>
If you are looking for using permanent events in Backbone I recommend to give a try to the <a title=""Permanent events in backbone.js"" href=""https://github.com/arqex/backbone-resolve"" target=""_blank"">backbone-resolve plugin</a>, and you don't need to read anymore.

Are you still reading? Well, then I am forced to show how to create permanent events for Backbone.js. The same can be achieved for others libraries like jQuery following a similar approach.

Instead of creating a Backbone plugin like backbone-resolve to extend Backbone's Event module directly, we are going to extend just one object to make it ready for permanent events. Let's call our object <code>PermanentEvents</code>, and we are going to implement a method in it called <code>resolve</code> (nod to promises) which is called instead of  <code>trigger</code> if we want to create a permanent event. An example would go as follows
<pre class=""lang:js decode:true"">// First, extend our object with events
// thanks to underscore
var myobject = _.extend({}, PermanentEvents);

// trigger the permanent event 'ready'
myobject.resolve('ready', 'I am ready');

// listening to the event now, 
// will execute the callback inmediatelly
myobject.on('ready', function(message){
	// Prints out 'I am ready'
	console.log(message);
});</pre>
Of course, you could also add your listener before using the <code>resolve</code> function, and it will be called just after the event is resolved.

Want to see how the resolve method work? Here it is.
<pre class=""lang:js decode:true crayon-selected"">var PermanentEvents = _.({}, Backbone.Events);

PermanentEvents.resolve = function(name){
		// make sure we have a resolved array
		this._resolved || (this._resolved = {});

		// Any aditional parameter is used as argument for the callbacks
		var parameters = Array.prototype.slice.call(arguments, 1);

		// Store the parameter values of the resolved event
		this._resolved[name] = parameters;

		// Trigger the event to call any bound listener
		return this.trigger.apply(this, arguments);

}</pre>
Basically, <code>resolve</code> stores the events and any argument that needs to be passed to the listeners in a attribute called <code>_resolved</code>. Just after that, it calls Backbone.Events' <code>trigger</code> method, to execute any listener that may be bound already.

With that code we have half of our work done. Now we just need to make the method <code>on</code> check if the events are already resolved to execute their listeners.
<pre class=""lang:js decode:true"">PermanentEvents.on = function(name, callback, context){
	// If the event has been resolved, execute the callback
	if(this._resolved &amp;&amp; this._resolved[name])
		callback.apply(context || this, this._resolved[name]);

	// And then continue as a standard on call, calling the original
	// on method
	return Backbone.Events.on.apply(this, arguments);
}</pre>
And that's all. It wasn't difficult, isn't it? You can extend any object with <code>PermanentEvents</code> in order to make it ready to resolve events. In Backbone's Events implementation, any function used to add listeners like <code>once</code>, <code>listenTo</code> or <code>listenToOnce</code> use the method <code>on</code> internally, so the code above is the only thing we need to make them all understand permanent events.

Are you already using permanent events in your code? Drop a comment!";"Permanent events in javascript";;"publish";"open";"open";;"permanent-events-javascript";;;"2014-06-22 11:40:31";"2014-06-22 11:40:31";;"0";"http://arqex.com/?p=900";"0";"post";;"2"
"934";"1";"2014-08-20 09:26:12";"2014-08-20 09:26:12";"Loading spinners are lots of fun. Their main purpose is to<strong> let users know that the app is loading</strong>, but it has a secondary one that make them very special: they should <strong>amuse the users while they are waiting</strong>. If they are good, they even make the waiting time shorter. The spinner is probably the part of an application where the designer can be more creative, having the freedom for creating a funny animation in an environment traditionally marked by the static nature of most of the components.

<strong>My challenge is to create 10 different loading spinners using 4 circles</strong> and CSS3 animations to cheer them up. It is a good creativity exercise, that will make me explore some key parts of CSS3 animations and, what is better, show them to you. I hope they are inspiring, let's start!
<h3>1. Newton's cradle</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""jsKza"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/jsKza/"">Newton's cradle</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
Hey! That doesn't spin, it is not a spinner! Well, it is common among loading animations to be circular, but I will start with some plain ones because they are simpler.

I will use the <code>--prefix-free</code> option offered by codepen in all the spinners, so the result CSS will be much easier to read.

In the <a title=""What is a newton's cradle?"" href=""http://en.wikipedia.org/wiki/Newton's_cradle"" target=""_blank"">Newton's cradle</a> only two balls are animated. I get a natural movement updating the <code>animation-timing-function</code> inside a keyframe. <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function"" target=""_blank""><code>animation-timing-function</code></a> applies easing to every transition between keyframes. When the function is updated inside some keyframe, the transition to the following one will use that given function. Using <code>ease-out</code> when the ball is going away and <code>ease-in</code> when it is returning we have the desired <em>pendulum</em> effect.
<h3>2. Wave</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""hgvxJ"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/hgvxJ/"">Wave</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
The timing function update inside a keyframe is also used in this spinner to ease the ball jump. <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function"" target=""_blank"">Timings functions</a> are really powerful, and for the wiping ball I am using a customized <code>cubic-bezier</code> value.

I expected the <code>ease</code> value to work here, but it was producing collisions with the jumping balls. That's because the <code>ease</code> value doesn't apply the same easing for the beginning than for the end of the animation, so I had to use <code>cubic-bezier</code> to get the effect I want. I would explain <code>cubic-bezier</code> curves here, but the easiest way to understand how they work is visiting <a href=""http://cubic-bezier.com/"" target=""_blank"">cubic-bezier.com</a>, its interactive graph is worth a thousand words.
<h3>3. Circus</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""FaDKs"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/FaDKs/"">Circus</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
Here we are spinning. Well, sort of... I will only use 2D transformations to create my spinners, so here there are just moving and scaling.

I use two animations for every ball. When you apply more than one animation to the same element, all of them run at the same time and , unfortunatelly, there is no way to create a queue using CSS3. But in this case is good enough.

Circus uses negative <code>animation-delay</code> values to set the starting position and size of each ball, and make them spin from the begining. As you can see, <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transforms"" target=""_blank"">CSS3 transforms</a> are used to change the size and position of the balls. <a href=""http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/"" target=""_blank"">Transform are really handy for CSS3 animations</a>, I like especially the <code>scale</code> one, that makes the balls grow or shrink respecting the center of the elements. That means the balls grow/shrink to the same proportion to the left/right horizontally and to the top/bottom vertically. If I had used <code>width</code> and <code>height</code> properties, the balls just would have grown/shrunk to the left and the bottom. By default, the origin of CSS3 transformation is the center of the element.
<h3>4. Atom</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""lKoay"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/lKoay/"">Atom</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
Let's start creating animations less horizontal. I will use Circu's 3D effect to create some electrons spinning around a nucleus :)

Here the <code>.ball</code> elements are actually squares, and the circles that are shown are<code> :before</code> pseudo-elements positioned absolutely at the top left of the square. Every square is rotated to make the balls move with a different inclination. Try to uncomment the <code>background</code> property in the electron mixin to see what I mean.

Animating the <code>z-index</code> property in the ball containers, I could make the electrons go back and forth around the nucleus. Pay attention than in firefox, to animate <code>z-index</code> property, the element should have a <code>z-index</code> value set up, otherwise it won't work. Also the nucleus has a subtle scale animation that make the spinner feel more dynamic.

People from github, don't you like it for you <a href=""https://atom.io/"" target=""_blank"">atom editor</a>? :)
<h3>5. Fussion</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""vfJbs"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/vfJbs/"">Fussion</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
So far whe have animated the position and the size of the balls, but focusing in other properties we can get really different spinners. Fussion focus in background colors, and it is inspired by my of Nexus 7's boot animation.

It is a basic strategy for every spinner to render the balls in the same state that they had in the begining of the loop, in order to make possible repeat the animation infinitely. In this case, every ball is transformed in the next one to get ready for the next loop. Making the balls semi-transparent creates the effect of color fussion when they are all together.
<h3>6. Mitosis</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""mKBcE"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/mKBcE/"">Mitosis</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
Mitosis uses an <code>alternate</code> value for the <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction"" target=""_blank""><code>animation-direction</code></a> property, that means that when the animation finishes, goes backwards to the begining again. That way the balls can split at the begining and merge at the end coding just the half of the animation.

But, if you look at the animation the balls are not merged in the same direction than they were splitted, that's because the whole spinner is rotated 90 degrees in the middle of the loop, using the <code>step(2, end)</code> value for the <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function"" target=""_blank""><code>animation-timing-function</code></a>. The step function make the animations complete rendering just the number of frames given to the function. In our case 2 frames, the first is rotated 0 degrees and the second 90. The end of the animation (a 180º rotation) is never visible because a new loop starts again.

Another trick used in Mitosis is the deformation of the balls, they are scaled horizontally and vertically asynchronously, showing a really interesting jelly effect.
<h3>7. Flower</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""FfEIx"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/FfEIx/"">Flower</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
First spinner here! Remember when I explained at Circus spinner that I said that by default the CSS3 transformations have the center of the object as origin by default? In flower, all the transformation's origins for the balls have been moved to the center of the spinner. That way the balls use that point as the center of the rotation instead their own center, so they can rotate as if they were one circle. <a href=""https://developer.mozilla.org/es/docs/Web/CSS/transform-origin"" target=""_blank""><code>transform-origin</code></a> is the property that let us customize the center of all the transformations.

Thanks to <a href=""http://lesscss.org/"" target=""_blank"">LESS </a>the calculation of the origin is a bit easier. In this spinner I wish I had some way of enqueueing the animations, because calculate the keyframes position manually was really painful.
<h3>8. Clock</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""Hzxfp"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/Hzxfp/"">Clock</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
Sometimes, to make some element spin, it is not necessary to change the <code>transform-origin</code>. In this case, <code>:before</code> pseudo-elements are used to render the balls, the same way they were in Atom spinner. So every <code>.ball</code> element is really a square, and the ball is placed in its top left. Rotating those squares we can make all the balls spin using the same center.

The <code>step</code> function is again used in the <code>.spinner</code> element to create the effect of whole spinner rotation in every loop of the ball group.
<h3>9. Washing machine</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""fAhoD"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/fAhoD/"">Washing machine</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
Here the borders are the starring of the spinner, but, in this case, none of the balls is animated. The whole spinner is what is rotated, very fast, and alternating the direction thanks to the <code>animation-direction</code> property.

In this spinner <code>:before</code> pseudoelements are used for rendering the small balls, and the <code>.ball</code> elements are rotated to place the balls in different points of the big border. Again, LESS is really helpful to make all the calculations needed to center the balls in their container.
<h3>10. Pulse</h3>
<p class=""codepen"" data-height=""268"" data-theme-id=""0"" data-slug-hash=""hcxwb"" data-default-tab=""result"">See the Pen <a href=""http://codepen.io/arqex/pen/hcxwb/"">Pulse</a> by Javier Marquez (<a href=""http://codepen.io/arqex"">@arqex</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
This is an example of how diverse spinners can be made if we focus in different css properties. The main property animated here is <code>border</code>, with a little help of the <code>opacity</code> one to create a bubbling effect.

This is not a complex slider because every ball uses the same animation. Here again, <code>animation-delay</code> is our friend to make every ball bubble at their time.
<h3>Conclusion</h3>
Here it is where I am supposed to say ""Animations are awesome, come on! Use them!"". They have very strong points:
<ul>
	<li>No need of any external libraries.</li>
	<li>The animations are hardware accelerated, so their performance is really good.</li>
</ul>
But creating the spinners I felt that they were made to create small effects. When you start to think bigger, the complexity of the code and calculations grows exponentially, making the use of css preprocessors almost mandatory for their development.

Also, browser support is not really big. At the moment of writing this article, only 23.8% of users will be able to see the animations if you don't use vendor prefixes, according to <a href=""http://caniuse.com/#feat=css-animation"" target=""_blank"">Can I Use</a>, so you will need a css prefixer if you don't want to get old writing them all.

A way of making a queue of animations would be great to have. Currently, <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions"" target=""_blank"">CSS transitions</a> can be used to create a queue, but you need a touch of javascript too coordinate when to apply them.

The last issue I would like to point out is that it is impossible to apply transformations independently. For example, if you want to move an element from 0px to 130px and, and in the middle you want to scale it to a 200% you need to calculate manually also the position of the element in that middle point:
<pre class=""lang:css decode:true"">@keyframes my-animation {

0%{
  transform: translateX(0);
}
50%{
  transform: translateX(65px) scale(2,2);
}
100%{
  transform: translateX(130px);
}
}</pre>
It may seem not a big problem, but if you want to apply some easing function, it will be applied to the 50% keyframe too, so it will got slower/faster in the middle of the animation.

I wouldn't use any library just to create a spinner in my projects, but if I had to create an app with some complex animation I would really think about using some tool like <a href=""http://julian.com/research/velocity/"" target=""_blank"">velocity.js</a> to make my life easier and gain some cross browser compatibility.
<h3>Your challenge</h3>
Did I tell you that spinners are fun? There is currently <a href=""http://www.reddit.com/r/web_design/comments/2dwj5p/community_challenge_design_a_css_spinner/"" target=""_blank"">a challenge to create the best spinner using CSS3 animations at reddit</a>. Web design community is always amazing, why don't to submit yours?

<script src=""//codepen.io/assets/embed/ei.js"" async=""""></script>";"4 balls 10 spinners: CSS3 Animations";;"publish";"open";"open";;"4-balls-10-spinners-css3-animations";;;"2014-08-21 10:41:35";"2014-08-21 10:41:35";;"0";"http://arqex.com/?p=934";"0";"post";;"3"
"939";"1";"2014-10-06 10:04:00";"2014-10-06 10:04:00";"Since javascript is everywhere nowadays, it is really easy to learn new stuff everyday. Once you know the basics of the language, you can take bits of code from here and there that have a lot of knowledge in them. <strong>Bookmarklets</strong> are perfect examples of a bunch of packed functionality, whenever I discover a useful one, I enjoy studying their source, discovering how it can do so much. Also snippets to use external services, like the google analytics code, or facebook likebox, can teach us more than some books.

Today I want to break in pieces a <a href=""https://gist.github.com/addyosmani/fd3999ea7fce242756b1"">one-liner code</a> that <a href=""http://addyosmani.com/blog/"" target=""_blank""><strong>Addy Osmani</strong></a> shared a few days ago that can be used to debug your CSS layers. Here it is, in 3 lines to fit in the post:
<pre class=""striped:false nums:false wrap:false lang:js decode:true"" title=""A CSS debugger in one line"">[].forEach.call($$(""*""),function(a){
  a.style.outline=""1px solid #""+(~~(Math.random()*(1&lt;&lt;24))).toString(16)
})</pre>
Try to type it in your browser console, and the different layers of HTML that there are in the web page will be highlighted in different colors. Isn't it awesome? Basically, <strong>it gets all the elements of the page, and applies a 1 px outline to them with a random color</strong>. The idea is simple, but to create a code line like this you must master a lot of aspects of web development. Let's study them.
<h2>TL;DR</h2>
People from <strong>Webucator</strong> made a video about this article, so you can watch instead of read. Isn't it great? If you are learning Javascript, checking <a title=""Javascript training"" href=""https://www.webucator.com/webdesign/javascript.cfm"" target=""_blank"">Webucator javascript training</a> is a must.
<div style=""text-align: center"">
https://youtu.be/6-xc-za9QJM
</div>
<h2>Selecting all the elements of a page</h2>
What it is needed the first is to get all the elements, and Addy uses the  function <code>$$</code> that is only available in the console of browsers. Try it by yourself, open your browser's javascript console and type <code>$$('a')</code> and you will get a list with all the anchor elements of the current page.

<code>$$</code> function is part of the command line API of modern browsers, and it is equivalent to use the method <code>document.querySelectorAll</code>, you can pass a CSS selector as argument to get the matched elements in the current page. So if you would like to use the one-liner out the browser's console you could replace <code>$$('*')</code> by <code>document.querySelectorAll('*')</code>. More about the function <code>$$</code> can be found in <a href=""http://stackoverflow.com/questions/8981211/what-is-the-source-of-the-double-dollar-sign-selector-query-function-in-chrome-f#answer-10308917"" target=""_blank"">this stackoverflow answer</a>.

It is great! For me, it was worthy to study the code just by meeting the function <code>$$</code>. But there are more about selecting everything in a page, if you have a look at the comments of the gist, there are people discussing this part of the code. One of them is <a href=""https://mathiasbynens.be/"" target=""_blank""><strong>Mathias Bynens</strong></a>, ( a lot of clever people there! ) who suggests that we can also use <code>document.all</code> to select all the elements of a page, it is not standard, but it works ok in every browser <del>but firefox</del> (in FF too).
<h2>Iterating over the elements</h2>
So we have all the elements now as a <a href=""https://developer.mozilla.org/en-US/docs/Web/API/NodeList""><code>NodeList</code></a> and we want to go through all of them applying the colorful outline. But wait, what the heck is used in our code?
<pre class=""lang:js decode:true"">[].forEach.call( $$('*'), function( element ) { /* And the modification code here */ });</pre>
<a href=""https://developer.mozilla.org/en-US/docs/Web/API/NodeList"" target=""_blank""><code>NodeLists</code></a> seems like <code>Arrays</code>, you can access to their nodes using brackets, and you can check how many elements it contains using the property length, but they doesn't implement all the methods of the <code>Array</code> interface, so using <code>$$('*').forEach</code> will fail. In Javascript there are several objects that look like arrays but they are not, like the arguments variable inside functions, and we have here a very useful pattern to handle with them: Calling array methods on no-array objects as <code>NodeLists</code> is possible using the Function's methods call and apply.<a title=""Javascript function context: bind vs call &amp; apply"" href=""http://arqex.com/853/javascript-function-bind-vs-call-apply""> I wrote about those functions some months ago</a>, they execute a function using the first parameter as the object this inside of the function
<pre class=""lang:js decode:true"">function say(name) {
 console.log( this + ' ' + name );
}

say.call( 'hola', 'Mike' ); // Prints out 'hola Mike' in the console

// Also you can use it on the arguments object
function example( arg1, arg2, arg3 ) {
 return Array.prototype.slice.call(arguments, 1); // Returns [arg2, arg3]
}</pre>
The one-liner is using <code>[].forEach.call</code> instead of <code>Array.prototype.forEach.call</code> to save some bytes ( another nice trick yeah? ) calling the method in the <code>Array</code> object <code>[]</code>. This would be equivalent to <code>$$('*').forEach</code> if <code>$$('*')</code> value was an <code>Array</code>.

If you have a look at the comments again, there are some people who use <code>for(i=0;A=$$('*');)</code> instead to make the code shorter. It works, but it is leaking global variables, so if you want to use the code out of the console, you better get a clean enviroment using
<pre class=""lang:default decode:true"">for(var i=0,B=document.querySelectorAll('*');A=B[i++];){ /* your code here */ }</pre>
If you use it in the browser's console it doesn't really matter, the variables <code>i</code> and <code>A</code> will be available there since you are declaring them there.
<h2>Assigning colors to the elements</h2>
To make the elements have that nice border, the code is using the CSS property <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/outline""><code>outline</code></a>. In case you don't know, the rendered outline is out of the CSS box model so <strong>it doesn't affect the size of the element or its position in the layout</strong>, so it is perfect for this purpose. It's syntax is like the one used for the <code>border</code> property, so it shouldn't be difficult to understand this part:
<pre class=""lang:js decode:true"">a.style.outline=""1px solid #"" + color</pre>
What  is interesting is how the color is defined:
<pre class=""lang:js decode:true"">~~(Math.random()*(1&lt;&lt;24))).toString(16)
</pre>
Scary uh? Sure. I am not a bit-wise operations expert, so this is the part I liked the most, because it let me learn a lot of new stuff.

What we want to achieve is a hexadecimal color like white <code>FFFFFF</code> or blue <code>0000FF</code> or... who knows... <code>37f9ac</code>. Non super-human people, like me, is used to work with decimal numbers, but our beloved code knows a lot about hexadecimal ones.

First thing it can teach us is how to convert a decimal number to hex using the method <code>toString</code> for integers. The method accepts a parameter to convert a number to a string using a base number of characters. If the parameter is not used, 10 characters are used (0...9, hence, decimal numbers), but you can use whatever other base:
<pre class=""lang:js decode:true"">(30).toString(); // ""30""
(30).toString(10); // ""30""
(30).toString(16); // ""1e"" Hexadecimal
(30).toString(2); // ""11110"" Binary
(30).toString(36); // ""u"" 36 is the maximum base allowed</pre>
The other way around, you can convert hexadecimal string to decimal numbers using the second parameter of the <code>parseInt</code> method:
<pre class=""lang:js decode:true"">parseInt(""30""); // ""30""
parseInt(""30"", 10); // ""30""
parseInt(""1e"", 16); // ""30""
parseInt(""11110"", 2); // ""30""
parseInt(""u"", 36); // ""30""</pre>
So we need a random number between <code>0</code> and <code>ffffff</code> in hexadecimal, that is <code>parseInt(""ffffff"", 16) == 16777215</code> and 16777215 is exactly <code>2^24 - 1</code>.

Do you like binary maths? If not, you will be ok knowing that <code>1&lt;&lt;24 == 16777216</code> (try it in the console).

If you like them, you need to know that every time that you add a 0 to the right of a 1 you are doing performing the <code>2^n</code> operation, being <code>n</code> the number of 0s you add.
<pre class=""lang:default decode:true"">1 // 1 == 2^0
100 // 4 == 2^2
10000 // 16 == 2^4
1000000000000000000000000 // 16777216 == 2^24</pre>
The left shift operation <code>x &lt;&lt; n</code> adds <code>n</code> <code>0</code>s to the binary representation of the number <code>x</code>, so <code>1&lt;&lt;24</code> is a short way of saying <code>16777216</code>, and doing <code>Math.random()*(1&lt;&lt;24)</code> we get a number between <code>0</code> and <code>16777216</code>.

We are not ready yet, because <code>Math.random</code> return a float number, and we need only the whole part. Our code use the<strong> tilde operator</strong> to get so. Tilde operator is used to negate a variable bit by bit. If you don't know about what I am talking about, here it is a good explanation:<a href=""http://www.javascriptturnsmeon.com/the-tilde-operator-in-javascript/"" target=""_blank""> Javascript's tilde operator</a>.

But the code doesn't care about bitwise negation, it uses the tilde because the bitwise operations discard the decimal part of a float number, so bitwise-negation applied twice is a short way of writing <code>parseInt</code>:
<pre class=""lang:js decode:true"">var a = 12.34, // ~~a = 12
    b = -1231.8754, // ~~b = -1231
    c = 3213.000001 // ~~c = 3213
;

~~a == parseInt(a, 10); // true
~~b == parseInt(b, 10); // true
~~c == parseInt(c, 10); // true</pre>
Again, if you go to the <a href=""https://gist.github.com/addyosmani/fd3999ea7fce242756b1"" target=""_blank"">gist</a> and have a look at the comments you will realize that people there is using a shorter version to get the parseInt result. Using the bitwise <strong>OR operator</strong> you can get rid of the decimal part of our random number
<pre class=""lang:default highlight:0 decode:true"">~~a == 0|a == parseInt(a, 10)
~~b == 0|b == parseInt(b, 10)
~~c == 0|c == parseInt(c, 10)</pre>
Or operator is the last to be used in a operation so the parenthesis are not needed anymore. Here it is the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"" target=""_blank"">precedence of javascript operator</a>s in case you are interested in having a look.

Finally we have our random number <code>0</code> and <code>16777216</code>, our random color. We just need to turn it to a hexadecimal string using <code>toString(16)</code> to make it work.
<h2>Last thoughts</h2>
Being a programmer is not easy. We are used to code like crazy and sometimes we don't realize about how much knowledge is needed to do what we do. It takes a long long time to learn and internalize all the concepts that we use in our job.

I wanted to highlight the complexity of our job because I know that programmers are usually underestimated, ( especially in my country, Spain ) and it is nice to say ocassionally that we are really worthy and a key part of most of companies nowadays.

If you understood the one-liner code at first sight you can feel proud of yourself.

If not, but you have reach this point of the article, don't worry, you will be able to write lines like that soon, you are a learner!

If you thought <em>tl;dr</em> at the second line of the article but you are reading this, you are really weird, but your thoughts are also welcome in the comments section below : )";"Learning much javascript from one line of code";;"publish";"open";"open";;"learning-much-javascript-one-line-code";;;"2015-06-05 14:12:10";"2015-06-05 14:12:10";;"0";"http://arqex.com/?p=939";"0";"post";;"66"
"967";"1";"2014-11-03 09:30:48";"2014-11-03 09:30:48";"Objects are one of the main parts of Javascript. JS syntax for Objects is really concise and easy to use, so we are constantly creating objects and using them as hashmaps effortlessly.
<pre class=""lang:js decode:true"">// My beloved object ob
var ob = {a: 1};

// Accessing to a property
ob.a; // =&gt; 1

// Modifying the value of a property
ob.a = 0;
ob.a; // =&gt; 0;

// Creating a new property
ob.b = 2;
ob.b; // =&gt; 2

// Deleting a property
delete ob.b;
ob.b; // =&gt; undefined</pre>
But, do you know that all the object properties in the example above are enumerable, writable and configurable? I mean:
<ul>
	<li><strong>Enumerable</strong>: I can access to all of them using a <code>for..in</code> loop. Also, enumerable property keys of an object are returned using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"" target=""_blank""><code>Object.keys</code></a> method.</li>
	<li><strong>Writable</strong>: I can modify their values, I can update a property just assigning a new value to it: <code>ob.a = 1000</code>;</li>
	<li><strong>Configurable</strong>: I can modify the behavior of the property, so I can make them non-enumerable, non-writable or even non-cofigurable if I feel like doing so. Configurable properties are the only ones that can be removed using the <code>delete</code> operator.</li>
</ul>
I bet that you knew about the two first features of <code>Object</code>'s properties, but there are less developers that know that they can <strong>create and update them to be non-enumerable or immutable</strong> using the <code>Object</code>'s method called <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"" target=""_blank"">defineProperty</a>.
<pre class=""lang:js decode:true"">// Adding a property to ob using Object.defineProperty
Object.defineProperty( ob, 'c', {
  value: 3,
  enumerable: false,
  writable: false,
  configurable: false
});

ob.c; // =&gt; 3

Object.getOwnPropertyDescriptor( ob, 'c' ); 
// =&gt; {value: 3, enumerable: false, writable: false, configurable: false}</pre>
I reckon that the syntax is not as friendly as usual one, but having this kind of properties can be really handy for some purposes. The object that define the property is called<strong> descriptor</strong>, and you can have a look at the descriptor of any property using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor"" target=""_blank""><code>Object.getOwnPropertyDescriptor</code></a> method.

It is funny that <strong>the default option values</strong> for <code>Object.defineProperty</code><strong> are completely the opposite</strong> to the ones applied when adding a property by assigment: The default property by assignment is non-enumerable, non-writable and non-configurable.
<pre class=""lang:js decode:true"">// The 'f' property will be non-enumerable. non-writable and non-configurable
Object.defineProperty( ob, 'f', {value: 6} );</pre>
It is also possible to define the properties on object creation if you instantiate it using the method <a href=""https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/create"" target=""_blank""><code>Object.create( prototype, properties )</code></a>. It accepts an object with property descriptors as the second parameter, and it can be used as follows
<pre class=""lang:js decode:true"">var ob = Object.create(Object.prototype, {
  a: { writable:true, enumerable:true, value: 1 },
  b: { enumerable: true, value: 2 }
}});

ob; // =&gt; {a:1, b:2}</pre>
<h2>Object's non-enumerable properties</h2>
As I said before, enumerable properties are accessible using <code>for...in</code> loops, so, non-enumerable ones aren't. Basically, non-enumerable properties won't be available using most of the functions that handle <code>Objects</code> as hashmaps.
<ul>
	<li>They won't be in <code>for..in</code> iterations.</li>
	<li>They won't appear using <code>Object.keys</code> function.</li>
	<li>They are not serialized when using <code>JSON.stringify</code></li>
</ul>
So they are kind of <em>secret</em> variables, but you can always access to them directly.
<pre class=""lang:default decode:true"">var ob = {a:1, b:2};

ob.c = 3;
Object.defineProperty(ob, 'd', {
  value: 4,
  enumerable: false
});

ob.d; // =&gt; 4

for( var key in ob ) console.log( ob[key] ); 
// Console will print out
// 1
// 2
// 3

Object.keys( ob );  // =&gt; [""a"", ""b"", ""c""]

JSON.stringify( ob ); // =&gt; ""{a:1,b:2,c:3}""

ob.d; // =&gt; 4</pre>
Since this kind of properties are not serialized, I found them really useful when handling data model objects. I can add handy information to them using non enumerable properties.
<pre class=""lang:js decode:true"">// Imagine the model that represent a car, it has a reference
// to its owner using owner's id in the owner attribute

var car = {
  id: 123,
  color: red,
  owner: 12
};

// I also have fetched the owner from the DB
// Of course, the car is mine :)
var owner = {
 id: 12,
 name: Javi
}

// I can add the owner data to the car model
// with a non-enumerable property, maybe it can
// be useful in the future
Object.defineProperty( car, 'ownerOb', {value: owner} );

// I need the owner data now
car.ownerOb; // =&gt; {id:12, name:Javi}

// But if I serialize the car object, I can't see me
JSON.stringify( car ); // =&gt; '{id: 123, color: ""red"", owner: 12}'


</pre>
Can you think how useful can this be to create a ORM library for example?

In case that you need to know all properties in an object, enumerable and non-enumerable ones, the method <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"" target=""_blank""><code>Object.getOwnPropertyNames</code></a> returns an array with all the names.
<h2>Object's non-writable properties</h2>
While the world waits for ES6 to finally arrive with the desired <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"" target=""_blank""><code>const</code> statemen</a>t, non-writable properties are the <strong>most similar thing to a constant</strong> that we have in Javascript. Once its value is defined, <strong>it is not possible to change it using assignments</strong>.
<pre class=""lang:js decode:true"">var ob = {a: 1};

Object.defineProperty( ob, 'B', {value: 2, writable:false} );

ob.B; // =&gt; 2

ob.B = 10;

ob.B; // =&gt; 2</pre>
As you can see, the assignment didn't affect the value of <code>ob.B</code> property. You need to be careful, because <strong>the assignment always returns the value assigned</strong>, even if the property is non-writable like the one in the example. In strict mode, trying to modifying a non-writable property would throw an <code>TypeError</code> exception:
<pre class=""lang:js decode:true"">var ob = {a: 1};
Object.defineProperty( ob, 'B', {value: 2, writable:false} );

// Assingments returns the value
ob.B = 6; // =&gt; 6
ob.B = 1000; // =&gt; 1000

// But the property remains the same
ob.B; =&gt; 2;

function updateB(){
  'use strict';
  ob.B = 4; // This would throw an exception
}

updateB(); // Throws the exception. I told you.
</pre>
It is also needed to keep in mind that<strong> if the non-writable property contains an object</strong>, the reference to the object is what is not writable, but <strong>the object itself can be modified yet</strong>:
<pre class=""lang:js decode:true"">var ob = {a: 1};
Object.defineProperty( ob, 'OB', {value: {c:3}, writable:false} );

ob.OB.c = 4;
ob.OB.d = 5;

ob.OB; // =&gt; {c:4, d:5}

ob.OB = 'hola';

ob.OB; // =&gt; {c:4, d:5}</pre>
If you want to have a property with an completely non-writable object, you can use the function <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"" target=""_blank""><code>Object.freeze</code></a>. <code>freeze</code> will make impossible to add, delete or update any object's property, and you will get a <code>TypeError</code> if you try so in strict mode.
<pre class=""lang:js decode:true"">var ob = { a: 1, b: 2 };

ob.c = 3;

// Freeze!
Object.freeze( ob ); // =&gt; {a:1,b:2,c:3}

ob.d = 4;
ob.a = -10;
delete ob.b;

Object.defineProperty( 'ob', 'e', {value: 5} );

// Every modification was ignored
ob; // =&gt; {a:1,b:2,c:3}</pre>
<h2>Object's non-configurable properties</h2>
You can update the previous behaviors of the properties if they are defined as configurable. You can use <code>defineProperty</code> once and again to change the property to writable or to non-enumerable. But once you have defined the property as non-configurable, there is only one behaviour you can change: If the property is writable, you can convert it to non-writable. Any other try of definition update will fail throwing a <code>TypeError</code>.
<pre class=""lang:js decode:true"">var ob = {};
Object.defineProperty( ob, 'a', {configurable:false, writable:true} );

Object.defineProperty(ob, 'a', { enumerable: true }); // throws a TypeError
Object.defineProperty(ob, 'a', { value: 12 }); // throws a TypeError
Object.defineProperty(ob, 'a', { writable: false }); // This is allowed!!
Object.defineProperty(ob, 'a', { writable: true }); // throws a TypeError
</pre>
An important thing to know about the non-configurable properties is that they can't be removed from the object using the operator <code>delete</code>. So if you create a property non-configurable and non-writable you have a <em>frozen</em> property.
<pre class=""lang:js decode:true"">var ob = {};

Object.defineProperty( ob, 'a', {configurable: true, value: 1} );

ob; // =&gt; {a:1}
delete ob.a; // =&gt; true
ob; // =&gt; {}

Object.defineProperty( ob, 'a', {configurable: false, value: 1} );

ob; // =&gt; {a:1}
delete ob.a; // =&gt; false
ob; // =&gt; {a:1}</pre>
<h2>Conclusion</h2>
<code>Object.defineProperty</code> was introduced with ES5, and you can start using it right now, <strong>it is supported by all modern browsers</strong>, including IE 9 ( and even IE 8, but <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Internet_Explorer_8_specific_notes"" target=""_blank"">only for DOM objects</a> ). It is always fun to play with javascript basics in a different way that we are used to, and it is easy to learn new stuff just observing how javascript core objects work.

<code>Object.defineProperty</code> also give us the chance of creating customized getters and setters for the properties, but I won't write about that today. If you want to learn more, have a look at the always amazing <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"" target=""_blank"">Mozilla's documentation</a>.

&nbsp;";"Javascript properties are enumerable, writable and configurable";;"publish";"open";"open";;"javascript-properties-enumerable-writable-configurable";;;"2014-11-03 09:38:19";"2014-11-03 09:38:19";;"0";"http://arqex.com/?p=967";"0";"post";;"13"
"971";"1";"2014-10-26 10:23:03";"2014-10-26 10:23:03";"If you find that Atom's default colors are ok, but you feel like the tabs are too big and the folder trees are wasting too much space, maybe you and I have some kind of thinking connection... :)

Fortunatelly, <strong>customizing atom is as easy as create a <em>less</em> file</strong>. I have created some styles to make atom feels a bit more like sublime text, making everything more compact:

<a href=""http://arqex.com/wp-content/uploads/2014/10/atom-compact.png""><img class=""aligncenter size-full wp-image-972"" src=""http://arqex.com/wp-content/uploads/2014/10/atom-compact.png"" alt=""atom-compact"" width=""835"" height=""590"" /></a>If you want to use these styles go to your atom's stylesheet:
<ul>
	<li>Click on Edit &gt; Open your stylesheet ( If you are using Mac / Linux )</li>
	<li>Click on File &gt; Open your stylesheet ( If you are using Windows )</li>
</ul>
Your stylesheet file for customizing atom will be in front of your eyes, so copy the <a title=""Atom stylesheet gist"" href=""https://gist.github.com/arqex/2ccb3a70e4cc310c9439"" target=""_blank"">following gist</a> there and save it:

<script src=""https://gist.github.com/arqex/2ccb3a70e4cc310c9439.js""></script>

Comments and improvements to the stylesheet are welcome.";"A compact stylesheet for Atom editor";;"publish";"open";"open";;"compact-stylesheet-atom-editor";;;"2014-10-27 16:15:13";"2014-10-27 16:15:13";;"0";"http://arqex.com/?p=971";"0";"post";;"0"
"991";"1";"2015-03-03 09:15:45";"2015-03-03 09:15:45";"There is a big hype about immutable data and <a href=""http://facebook.github.io/react/index.html"" target=""_blank"">React.js</a> after the first react conference hold in SF, but it is not easy to find examples on how to use them together to get a great development experience. Today we are going to build a JSON editor using them to show all the benefits they provide.

Our JSON editor will be simple, it will let us:
<ul>
	<li>Adding, removing and editing attributes from our JSON object.</li>
	<li>It will store arrays, hashes and strings.</li>
	<li>It will highlight modified nodes.</li>
	<li>It will be ugly, no time for styling, sorry :)</li>
</ul>
<a class=""jsbin-embed"" href=""http://jsbin.com/dujatu/2/embed?output"">JS Bin</a>
<script src=""http://static.jsbin.com/js/embed.js""></script>

<a href=""http://jsbin.com/dujatu/2/edit?js,output"" target=""_blank"">You can play with the code in the JSBin</a>. Don't you like it? I love it :D
<h2>Why immutable data?</h2>
The reason of using immutable data in our apps is to change the way we think about building web applications.

Our React.js component won't be able to update the data that it receives directly. Instead of that, it will request the changes, new data will be generated from the top and passed down through the parent components until our component receives it. If the data has changed, we re-render the component, otherwise we don't. That's sounds a lot like <a href=""http://facebook.github.io/flux/"" target=""_blank"">Flux</a> way of doing things recommended by Facebook when using React.js, with the data always flowing in the same direction.

Working that way, our UI can be completely data driven. <strong>We don't need to think about what to update in our views</strong> when some event happens: events will update the data, and <strong>our views will be just a representation of that data</strong>. Our code will be rather 'reactive' than 'proactive' and, since there will be less parts of the application where the data is updated, it will much easier to understand.

Immutable data also makes easier to check when a component should be updated. If the data can't change, just a direct comparison is needed to know if it is different to the current one:
<pre class=""lang:default decode:true crayon-selected"">componentShouldUpdate: function( newProps ){
  return this.props.data != newProps.data;
}</pre>
That function will save a lot of processing and reconciliation between react's virtual DOM and the real one, boosting our app performance. You can create your own <code>componentShouldUpdate</code> function like the one above or use the <a href=""http://facebook.github.io/react/docs/pure-render-mixin.html"" target=""_blank"">PureRenderMixin</a> that comes with react addons.
<h2>Understanding the JSON editor</h2>
Basically, our editor will be have 5 different components:

<a href=""http://arqex.com/wp-content/uploads/2015/02/components.png""><img class=""aligncenter size-full wp-image-994"" src=""http://arqex.com/wp-content/uploads/2015/02/components.png"" alt=""components"" width=""290"" height=""305"" /></a>

An <code>Attribute</code> is each object property or array element that our JSON data has. As I said before, the <code>Attribute</code>s can store 3 types of data: strings, objects and arrays, so every type has a component to edit its value properly. <code>AttributeCreator</code>s will let the user add new attributes to our arrays and objects.
<h2>Introducing freezer.js</h2>
Talking about immutable data in javascript is talking about <a href=""http://facebook.github.io/immutable-js/"" target=""_blank"">Immutable.js</a>, but today we will use <a href=""https://github.com/arqex/freezer"" target=""_blank"">Freezer.js</a> a simpler alternative that brings some benefits:
<ul>
	<li>It is lightweight (7KB minified).</li>
	<li>It uses objects and arrays to store the data, so we almost don't need to learn new methods to start using it.</li>
	<li>It emits events on data updates out of the box, so we can use them to refresh our app.</li>
</ul>
Creating and using a Freezer store is easy:
<pre class=""lang:js decode:true"">// Let's create a store
var store = new Freezer({
    a: {x: 1, y: 2, z: [0, 1, 2] },
    b: [ 5, 6, 7 , { m: 1, n: 2 } ],
    c: 'Hola',
    d: null // It is possible to store whatever
});

// Get the immutable data
var frozen = store.get();

// Read the data
frozen.c; // Hola
frozen.a.x; // 1
frozen.b[3].n // 2

// But the data is frozen and it is not possible
// to update it directly
frozen.c = 'Adios';
frozen.c; // Hola
</pre>
The idea behind Freezer.js is<strong> having one main store for our application</strong>. Every component receive its part of the store from the props, and that part of the store is immutable so the component can't edit it directly. The good news are that Freezer's store nodes have with them the tools needed by the component to request updates for that piece of the data.

Array and object nodes in a frozen store have methods like <code>set</code> to update the data, objects have <code>remove</code> to delete some attribute or it is possible to use methods like <code>push</code> or <code>splice</code> on the array nodes. But those methods don't udpate the nodes directly, they request the update to the store and it is the store who creates a new immutable object with the data updated, starting from the root of the tree.

Imagine we have a store with the following structure and we update some data on it
<pre class=""lang:js decode:true"">var store = new Freezer({
  a: {d: 1},
  b: 2,
  c: {e:3, f: {h: 4 ,i: 5}, g:6}
});

// Get the immutable data
var frozen = store.get();

// Somewhere inside a component an update
// is requested
var updated = frozen.c.f.set({h: 8});

// the method return the new frozen object
// for the domain;
updated; // {h: 8, i: 5}
store.get().c.f === updated; // true

// But the original one has not changed
// because it is immutable
frozen.c.f; // {h: 4 ,i: 5}</pre>
Instead of updating the node, Freezer creates a new data tree starting from the top. The nodes in the update path are new, but the rest are reused, so they won't trigger a UI refresh in the components that use non-modified nodes.

<a href=""http://arqex.com/wp-content/uploads/2015/02/trees.png""><img class=""aligncenter size-medium wp-image-1008"" src=""http://arqex.com/wp-content/uploads/2015/02/trees-300x150.png"" alt=""Trees"" width=""300"" height=""150"" /></a>

Since the store is updated from the top, the UI refresh start from the top component passing the updates to the children via props. But how do I know when a update happens? In the case of Freezer, the updates trigger an <code>update</code> event in the store that we can use to refresh the UI. Here an example
<pre class=""lang:js decode:true"">var store = new Freezer( {a:1, b:2} );

// A dumb component that refresh on data change
var DumbComponent = React.createClass({
	render: function(){		
		return &lt;div&gt;{this.props.frozen.a} - {this.props.frozen.b}&lt;/div&gt;;
	},
	componentDidMount: function(){
		var me = this;

		// Whenever the data change we pass the new one
		// to the props
		store.on('update', function(){
			me.setProps({ frozen: store.get() });
		});
	}
});

// Render our awesome component
React.render( &lt;DumbComponent frozen={ store.get() } /&gt;, document.body );</pre>
That's the only event listening that we need to make our app refresh on a store update. Using freezer, we stop thinking about what to update in the UI when something happens and we start thinking about what to render in our components depending on the props they receive.
<h2>Creating JSON editor top component</h2>
As I explained before we need a top component to refresh the props using the <code>setProps</code> method. In React.js components, component's <code>setProps</code> method can only be used by the top component and it won't work if we use it in a child. It is the way that React.js uses to encourage passing props down to the tree.

In our top component we will add a JSON previewer to check how our changes are applied to the store. The initialization code is like this:
<pre class=""lang:js mark:21,31,44 decode:true"">/****************
JSON data to edit
*****************/
var json = {
	hola: 'amigo',
	adios:'enemigo',
	obj: { hi: 'man', bye: 'dude' },
	arr: ['a', 'b', {c: 1}, 'd']
};

// Create a Freezer store
var frozen = new Freezer( { json: json });

// Our top component
var DocEditor = React.createClass({

	render: function(){
		var store = this.props.store;
		return (
			&lt;div className=""docEditor""&gt;
				&lt;ObjectAttribute value={ this.props.store.json } original={ this.props.original.json }/&gt;
				&lt;pre&gt;{ JSON.stringify( this.props.store.json, null, '  ')}&lt;/pre&gt;
			&lt;/div&gt;
		);
	},

	componentDidMount: function(){
		var me = this,

			// Let's create a listener to update the store on change
			listener = this.props.store.getListener()
		;

		// We are going to update the props every time the store changes
		listener.on('update', function( updated ){
			me.setProps({ store: updated });
		});
	}
});

/****************
Start the UI
*****************/
React.render(&lt;DocEditor store={ frozen.get() } original={ frozen.get() } /&gt;, document.body);</pre>
Our top component receives the immutable data directly as its store prop. Instead of listening to the Freezer store directly, we create a listener for the immutable data itself, this way the Freezer store doesn't need to be exposed to the component, just its data. In a Freezer store you can create a listener at any array or object node using <code>getListener</code> and it will trigger update events when the node changes.

As you can see, we will keep a copy of the original JSON structure in order to highlight the nodes that have been updated.

I will explain the <code>ObjectAttribute</code> later, but now we need to know that we can use the component that represents an Object in our editor to hold the JSON editor, because a JSON structure is a javascript object itself.
<h2>Attributes</h2>
A JSON object is a tree that can have infinite levels of depth. Every node of the tree that is not a leaf, can be an <code>Array</code> or an <code>Object</code>, and their children have two main parts: a key and a value.

Our <code>Attribute</code> component will represent any child for an <code>Object</code> or <code>Array</code>. If it is a child of an <code>Object</code>, the key would be any string, and if the <code>Attribute</code> component is child of an <code>Array</code>, its key will be an integer that corresponds to the index of the value in the array:
<pre class=""lang:js decode:true"">// If we have this array
var arr = [ 'a', 'b' ];

// It will be composed by two attributes
&lt;Attribute attrkey=""0"" value=""a"" /&gt;
&lt;Attribute attrkey=""1"" value=""b"" /&gt;


// If we have this object
var ob = { first:'a', second: 'b' };

// It will be composed by two attributes
&lt;Attribute attrkey=""first"" value=""a"" /&gt;
&lt;Attribute attrkey=""second"" value=""b"" /&gt;</pre>
Depending on the value, the attribute will create a different component to edit it. Our editor supports <code>Objects</code>, <code>Arrays</code> and <code>Strings</code> so the <code>Attribute</code> component will render <code>ObjectAttribute</code>s, <code>ArrayAttribute</code>s and <code>StringAttribute</code>s. Since an <code>ObjectAttribute</code> or <code>ArrayAttribute</code> can have again multiple <code>Attribute</code>s inside we can handle an infinitely nested structure.

The code of our attribute component is the following.
<pre class=""lang:js decode:true"">var Attribute = React.createClass({
	render: function(){
		// createAttribute helper will return the proper Component depending on the value of our attribute
		var typeAttribute = createAttribute( this.props.value, this.props.original, this.props.parent, this.props.attrkey ),
			modifiedClass = this.props.value == this.props.original ? '' : ' modified',
			className = 'hashAttribute' + modifiedClass
		;

		return (
			&lt;div className={className}&gt;
				&lt;a href=""#"" className=""attrRemove"" onClick={ this.handleRemove }&gt;[x]&lt;/a&gt;
				&lt;span className=""attrName""&gt;{this.props.attrkey }:&lt;/span&gt;
				&lt;span className=""attrValue""&gt;{ typeAttribute }&lt;/span&gt;
			&lt;/div&gt;
		);
	},

	handleRemove: function( e ){
		e.preventDefault();
		if( this.props.parent.constructor == Array )
			this.props.parent.splice( this.props.attrkey, 1 );
		else
			this.props.parent.remove( this.props.attrkey );
	},

	shouldComponentUpdate: function( nextProps, nextState ){
		return nextProps.value != this.props.value || 
			nextProps.parent != this.props.parent
		;
	}
});</pre>
The <code>Attribute</code> component will receive the original value and we will use it to know if the node has been modified. This is the first place where we got a benefit from using immutable data, because we don't need to deep check if there is something in our attribute that has changed. Our data is immutable and we can do <code>this.props.value == this.props.original</code> to check if it has changed, no matter how deep is the structure, and add a class to our markup to highlight it.

Also, the parent node is passed as a prop to the Attribute component in order to be able of removing the attribute or update its value. This is a nasty way of update the node, <code>Attribute</code> scope is just the attribute and receiving the parent node we are allowing the <code>Attribute</code> to change data that is out of its scope. I will leave this example as it is for sake of simplicity, but ideally the updates should be done by the parent. To let the parent make the update, you can use <a href=""http://facebook.github.io/react/tips/communicate-between-components.html"" target=""_blank"">callbacks</a> or my preferred method, <a href=""http://arqex.com/1028/better-flux-dom-events"" target=""_blank"">events</a>.

As you can see in the example, <code>Attribute</code> is responsible of remove itself from the store and it uses Freezer methods to do so. Using <code>splice</code> for arrays and <code>remove</code> for objects, the component require the deletion of the attribute. The store will be then regenerated showing the results. It wasn't difficult, was it?

Usually, to update a nested structure we will handle paths to know what to update, but Freezer takes care of that for us, and since the tree is regenerated <code>Attribute</code>'s parent will refresh its child count and marked as modified automatically. Suddenly we have a lot of extra features for our editor out of the box, without writing a line of code.

If you are creating a more complex app or you want to take a more traditional Flux approach, you'd rather call an action with the frozen node as payload. That way the update is clearly triggered outside the view.

I have added also a <code>shouldComponentUpdate</code> method that will increase our UI performance. React.js DOM reconciliation is really fast and the UI would work fine without the method, but just adding that line we rest sure that not even render will be called if it is not necessary.
<h2>Adding elements to our JSON object</h2>
Now it is time to talk about non-leaf nodes. In a JSON object they can be <code>Object</code>s and <code>Array</code>s, that's why our editor will have special components for them. Nevertheless, <code>ObjectAttribute</code> and <code>ArrayAttribute</code> are very similar, they have a list of <code>Attribute</code> components and at the end they will render an <code>AttributeCreator</code> component to let the user add new elements to the node.

<code>AttributeCreator</code> is a stateful component, clicking on it will set its state to editing and it will show a type selector to add a new element to our node. If the <code>AttributeCreator</code> doesn't receive an attrkey prop ( <code>ObjectAttribute</code>s ), it will also display a text input box to let the  user define the key for the new attribute. <code>ArrayAttribute</code>s will set attrkey to the next index in order to add the element to the end of the array.

Let's have a look at the method that <code>AttributeCreator</code> uses to add elements:
<pre class=""lang:js decode:true"">createAttribute: function(){
	this.setState({creating: false});

	var parent = this.props.parent,
		value = typeDefaultValues[ this.state.type ]
	;

	if( parent.constructor == Array )
		parent.push( value )
	else
		parent.set(this.state.attrkey, value );
}</pre>
The same way than the <code>Attribute</code> component, <code>AttributeCreator</code> receive the parent node in order to add a new child to it ( ouch! Remember, use events or callback to fix it ). And, again, we can use Freezer immutable data to request the update using the push or set method depending if we are updating an <code>Array</code> or an <code>Object</code>. Those methods will refresh the store and the component will receive the new values.
<h2>Updating leaf nodes</h2>
I already have pointed out how our JSON editor  removes and adds elements to the store, and that is basically the function that <code>ArrayAttribute</code> and <code>ObjectAttribute</code> are designed for. Updating a leaf node is not much different, <code>StringAttribute</code> is the component that show and edit them in our editor. When editing a string, the store is updated on pressing the enter key or when the input box loses the focus, using the set method. I'd recommend to have a look at the code and check if you can fully understand it.
<h2>A bonus: Undo and redo</h2>
Undo &amp; redo feature is the most used example to show the benefits of immutable data and I couldn't resist adding it to our JSON editor. Whenever we update the store, the new tree reuses the nodes from the previous data that haven't been updated, that way it is not memory expensive to store the different states that are being generated. <a href=""http://jsbin.com/hugusi/1/edit?js,output"" target=""_blank"">Here you have the jsbin working with history support</a>.

The first thing to update in our editor to add the history capabilites is the render call to our top component method. We will pass the Freezer store to it instead of the immutable data.
<pre class=""lang:js decode:true"">React.render(&lt;DocEditor store={ frozen } original={ frozen.get() } /&gt;, document.body);</pre>
Freezer stores have a set method to replace the data completely and that is perfect for doing undos and redos. The idea is to save the state of the editor on every update, so we can roll back to previous states just replacing the data.
<pre class=""lang:default decode:true"">var DocEditor = React.createClass({
	getInitialState: function(){
		// We create a state with all the history
		// and the index to the current store
		return {
			storeHistory: [ this.props.store.get() ],
			currentStore: 0
		};
	},
  // ...
	undo: function(){
		var nextIndex = this.state.currentStore - 1;
		this.props.store.set( this.state.storeHistory[ nextIndex ] );
		this.setState({ currentStore: nextIndex });
	},
	redo: function(){
		var nextIndex = this.state.currentStore + 1;
		this.props.store.set( this.state.storeHistory[ nextIndex ] );
		this.setState({ currentStore: nextIndex });
	},
  // ...
	componentDidMount: function(){
		var me = this;

		// We are going to update the props every time the store changes
		this.props.store.on('update', function( updated ){

			var storeHistory, nextIndex;
			// Check if this state has not been set by the history
			if( updated != me.state.storeHistory[ me.state.currentStore ] ){

				nextIndex = me.state.currentStore + 1;
				storeHistory = me.state.storeHistory.slice( 0, nextIndex );
				storeHistory.push( updated );

				// Set the state will re-render our component
				me.setState({
					storeHistory: storeHistory,
					currentStore: nextIndex
				});
			}
			else {
				// The change has been already triggered by the state, no need of re-render
			}
		});
	}
  // ...
});</pre>
We have now a component state and we will let <code>setState</code> to be the one who re-renders our component instead of the <code>setProps</code> method. However our 'source of truth' will still be the store, and we will use the component state just to save the history.

As you can see in the code, undo and redo just set the <code>currentStore</code> index back and forward and set the store that is in our history. We have the 50% of all the work done with those methods to add the new feature, we just need to store new updates as new states whenever our store change to complete it. That's the part that can be seen in the <code>componentDidMount</code> method.

Voilà, a JSON editor with undo and redo buttons!
<h2>Conclusion</h2>
The greatest thing of immutable stores is that they force you to change the way you face building web applications. Your components will forget about what to update and they will focus on what to render, making easier for the developer to understand what is happening in the app. Once you start to work like this you won't go back.

Having one store to have our app data aligns really well with the idea of passing props down to child components, and it is a direct way to go if you are looking to render your app also in the server. Freezer seems to adapt perfectly to the one store paradigm because it makes easy to update nodes deep in the tree, and any update will update the parents too, so the new props will be passed from above. Probably you won't use Freezer's updating methods inside your components in a real app, it would be better to pass the nodes as action payloads to the dispatcher following a more 'traditional' Flux way.

It is possible to work in the same way with<a href=""http://facebook.github.io/immutable-js/"" target=""_blank""> Immutable.js</a> + <a href=""https://github.com/omniscientjs/immstruct"" target=""_blank"">Immstruct.js</a>, but I feel that Freezer.js API is more agile. It uses objects and arrays to store the data and that helps when adding Freezer to any existing project, not needing heavy updates in the components.

And you? Are you already using frozen data in your apps?

&nbsp;";"A JSON editor with React and Immutable data";;"publish";"open";"open";;"json-editor-react-immutable-data";;;"2015-03-05 16:14:31";"2015-03-05 16:14:31";;"0";"http://arqex.com/?p=991";"0";"post";;"2"
"1028";"1";"2015-02-24 12:47:13";"2015-02-24 12:47:13";"I have been <a href=""https://github.com/arqex/curxor/issues/1"" target=""_blank"">discussing a lot lately with smart guys</a> about what is the best way of organizing your application using <a href=""http://facebook.github.io/react/docs/getting-started.html"" target=""_blank"">React.js</a> and I would like to share what I have learnt.

Facebook released react two years ago saying <em>""Hey guys, here you have the V for your MVC web apps!""</em> and it turned out to be a great V. But how should I organize the rest of the app? People tried to mix react views with backbone models then to try to fill the gap then, but those solutions were a bit overkilling.

Last year React guys appeared again to say <em>""Hey guys, use <a href=""https://github.com/facebook/flux"" target=""_blank"">Flux</a>, your data should flow in just one direction""</em>. The second commandament was really good too. Receiving the props from above and reducing component states reduce the complexity of developing web apps. But it made grow more questions in developers' heads: where should I put the code to fetch data from the server? How can I handle async actions? How can a child component communicate with its parent?
<h2>The rise of Flux libraries</h2>
Whenever questions are made, people try to answer their own way, and a lot of custom flux implementations started to appear: <a href=""http://fluxxor.com/"" target=""_blank"">Fluxxor</a>, <a href=""https://github.com/spoike/refluxjs"" target=""_blank"">Reflux</a>, <a href=""https://github.com/yahoo/fluxible"" target=""_blank"">Fluxible</a>, <a href=""http://martyjs.org/"" target=""_blank"">Marty</a>... Even I released my own implementation: <a href=""https://github.com/arqex/fluxify"" target=""_blank"">Fluxify</a>.

<strong>All of them do the same and all of them are incompatible with the others</strong>. Once you start using one implementation, your react components get highly coupled to that library, and it is not easy to switch from one to another.

But the way that React.js components are defined encourages to reuse and encapsulate them. <strong>Why can't we use them like if they were web components</strong>?
<h2>Events to the rescue</h2>
Flux idea is great, <a href=""https://vimeo.com/3191188"" target=""_blank"">flow like water my friend</a>. But the way that Facebook propose to flow is pushing the water with the hand. <strong>Dispatching actions from the components is too imperative</strong>, our views need to say <em>""Hey app, something happened""</em> instead of <em>""Hey app, do something""</em>.

Events are the natural way of saying that something has happened in web pages. They have been used succesfully by HTML elements for years and it is the recommended way for the a web component to communicate with the world outside its shadow DOM. And the best part of events is that they are shipped by every browser, so why not to use them with react.js?
<h2>Flux with DOM events</h2>
It would be great to use React's synthetic event system, but it has an event set defined and it is not possible to use it to emit custom events.

So let's use DOM events. Some of you will think that DOM and React are not a good match, but this has nothing to do with fast rendering,<strong> it is about communicate user interaction to our app</strong>.

<strong>DOM events will replace Flux dispatcher</strong> and actions will react ( oops! I used the r word! ) to those events in order to update the stores. <strong>They should be rather called reactions</strong>.

So instead of having the traditional Flux diagram

<a href=""http://arqex.com/wp-content/uploads/2015/02/traditionalFlux.png""><img class=""aligncenter size-full wp-image-1033"" src=""http://arqex.com/wp-content/uploads/2015/02/traditionalFlux.png"" alt=""traditionalFlux"" width=""300"" height=""440"" /></a>

Using events we have something simpler, aligned with some of the most popular flux implementations that don't implement a dispatcher either.

<a href=""http://arqex.com/wp-content/uploads/2015/02/eventFlux.png""><img class=""aligncenter size-full wp-image-1034"" src=""http://arqex.com/wp-content/uploads/2015/02/eventFlux.png"" alt=""eventFlux"" width=""300"" height=""330"" /></a>

Notice that the line that the line that binds the view with the reactions is dashed. The graph want to remark that <strong>Views are independent from the reactions</strong>, they will emit events but <strong>they don't know anything about reactions</strong>.

We need also a <strong>hub</strong> where our reactions will be listening to the events. I think that <strong>the document object would be perfect</strong>. The events will be emitted by the DOM node of our components, so the reactions will wait for the events to bubble up through the DOM until they reach the document object, starting the reactions.

The reactions can be coordinated using events too. <strong>A reaction can emit new events on finishing, starting new reactions</strong>, so we don't need the dispatcher's <code>waitFor</code> method anymore. In this eventful system, async reactions can work the same way than sync ones, triggering events on finishing. At this point, if we have several reactions dependant from others you can use event stream libraries like <a href=""https://github.com/Reactive-Extensions/RxJS"" target=""_blank"">RxJS</a> or <a href=""https://baconjs.github.io/"" target=""_blank"">Bacon.js</a> to make easier event handling if you want ( RxJS and React.js at the same time! ).
<h2>A simple example</h2>
Let's make a simple counter with a button to increase.
<pre class=""lang:js decode:true"">// A simple store
var store = {count: 0};

// Let's create a counter component that we can use
// in all of our projects
var Counter  = React.createClass({  
    render: function(){
        return (
            &lt;div className=""counter""&gt;
                &lt;span&gt;{this.props.count}&lt;/span&gt;
                &lt;button onClick={ this.onIncrease }&gt;Increase&lt;/button&gt;
            &lt;/div&gt;
        );
    },
    onIncrease: function(){
        // Hit the button will just emit an event
        var e = document.createEvent('Event');
        e.initEvent('counter', true, true);
        
        this.getDOMNode().dispatchEvent( e );
    }
});

// Our reaction
var increaseReaction = function( e ){
    store.count++;

    // The ideal store would trigger a change event,
    // our store is a common object, so we are going to 
    // refresh the page for demonstration purposes
    React.render( &lt;Counter count={ store.count } /&gt;, document.body );
}
document.addEventListener( 'counter', increaseReaction, false );

React.render( &lt;Counter count={ store.count } /&gt;, document.body );</pre>
<a href=""http://jsbin.com/rudabafefa/2/edit?html,js,output"" target=""_blank"">You can see it working in this JSBin</a>.
<h2>Communication children-parent</h2>
Using DOM events also make easier the communication between a parent its children components. Sometimes, it is handy that the parent manages the state of its children and, to do so, Facebook recommends to <a href=""http://facebook.github.io/react/tips/communicate-between-components.html"" target=""_blank"">pass a callback to the child component</a>. It is a messy solution, it generates some boilerplate code to store the callbacks and makes you develop your child components depending on functions that live outside them.

Since we have eventful components now, our parent component can now listen to children events to coordinate them, and the children will just execute its own code. Let's create a selectable list:
<pre class=""lang:js decode:true"">// A simple store
var store = {count: 0};

// Let's create a counter component that we can use
// in all of our projects
var Item  = React.createClass({  
    render: function(){
      var className = 'item';
      if( this.props.selected )
        className = ' selected';
       
      return (
        &lt;div className={ className }&gt;
        &lt;span&gt;Item { this.props.index } &lt;/span&gt;
        &lt;button onClick={ this.onSelect }&gt;Select&lt;/button&gt;
        &lt;/div&gt;
      );
    },
    onSelect: function(){
    
        // Hit the button will just emit an event
        var e = document.createEvent('Event');
        e.initEvent('select', true, true);
        
        // Add item index to the event
        e.detail = this.props.index;
        
        this.getDOMNode().dispatchEvent( e );
    }
});

var List = React.createClass({
  getInitialState: function(){
    // The list will store the selected state
    return {selected: -1}
  },
  render: function(){
    var items = [],
      i = 0
    ;
    
    for(;i&lt;3;i++){
      items.push( 
        &lt;Item key={ i } index={ i } selected={ i == this.state.selected } /&gt; 
      );
    }
    
    return &lt;div className=""list""&gt;{ items }&lt;/div&gt;;
  },
  componentDidMount: function(){
    var me = this;
    
    // Detect if some child has been selected
    this.getDOMNode().addEventListener( 'select', function( e ){
      me.setState({ selected: e.detail });
    });
  }
});

React.render( &lt;List /&gt;, document.body );</pre>
<a href=""http://jsbin.com/kemufabilo/1/edit?html,js,output"" target=""_blank"">This is the list working in a JSBin</a>.

The selected item state is stored in the list instead of in the items, that way it is easy to have just one item selected at a time.
<h2>Conclusion</h2>
Using events for the communication of your components has benefits that can be spotted at the first use. It is not just making our components independent, moving the application logic to the reactions creates a clear C for the MVC pattern, taking it out from the Views and the Model, enforcing a clear separation of concerns.

If you liked the article, I have created a quick helper called <a href=""https://github.com/arqex/flux-reactions"" target=""_blank"">flux-reactions</a> to reduce boilerplate of using events on your components, every contribution is welcome!

If you are looking for a great Model to complete the MVC, I would recommend <a href=""https://github.com/arqex/freezer"" target=""_blank"">Freezer</a>, because I am the author, but any other immutable store would make your development fly.";"A better Flux with DOM events";;"publish";"open";"open";;"better-flux-dom-events";;;"2015-03-03 11:58:25";"2015-03-03 11:58:25";;"0";"http://arqex.com/?p=1028";"0";"post";;"6"
"1058";"1";"2015-06-11 12:03:42";"2015-06-11 12:03:42";"Fetching data in Flux applications has always been a controversial point. Should it be handled inside the stores? Should we have asynchronous actions to get it?

In the last React conference we knew <a href=""http://facebook.github.io/react/blog/2015/02/20/introducing-relay-and-graphql.html"" target=""_blank"">how Facebook fetches the data in their react applications</a>. Basically they <em>created </em>a language to compose fetch queries called <strong>GraphQL</strong>. Their servers understand GraphQL queries and return just the requested data.

It is really interesting how they create the GraphQL queries. <strong>Every component define their data dependencies declaratively</strong>. Something like this:
<pre class=""lang:js decode:true"">var FriendInfo = React.createClass({
    statics: {
        queries: {
            user: function(){
                return graphql `User { name, mutual_friends { count } }`;
            }
        }
    },
    render: function() { ... }
});</pre>
Before the component is mounted, facebook app fetches the data that it needs and inject it as props, so <code>FriendInfo</code> can access to the user data just accessing to <code>this.props.user</code>. This is done automatically thanks to a framework that they created called <strong>Relay</strong>, no special development (actions, actionHandlers... ) is needed when creating a new component to fetch the needed data.

GraphQL, Relay... sounds really complex, and they are not opensourced yet. Is it possible to have the same workflow nowadays with our current tools? Sure, let's make a small app that works this way:

* <a href=""http://development.react-declarative-fetching.divshot.io/"" target=""_blank"">Here the app finished and working</a>.
* <a href=""https://github.com/arqex/react-declarative-fetching"" target=""_blank"">Here its source code at github</a>.
<h2>What do we want?</h2>
We want to <strong>define data dependencies</strong> for the components <strong>declaratively</strong> and <strong>inside the components themselves</strong>, the same way that is done with Facebook's Relay.

Imagine we have a <code>Posts</code> component that lists all the posts in our blog. We need to fetch all the posts of the blog for our component, so it will be like this:
<pre class=""lang:js decode:true"">var Posts = React.createClass({
    statics: {
        deps: function(){
            return { posts: '/posts' };
        }
    },

    render: function() {
        return (
            &lt;div className=""postsPage""&gt;
                &lt;h2&gt;Posts&lt;/h2&gt;
                &lt;Table rows={ this.props.posts } /&gt;
            &lt;/div&gt;
        );
    }
}</pre>
We have defined that the component will need the data from the API route <code>/posts</code>.  That data should be fetched automatically, so the component can access to it through <code>this.props.posts</code>.

This declaration is inside a static method in the react component because it will be called before the component is mounted, Even before it is instantiated, so it is not possible to call <code>this</code> inside the method.

Since we don't have a GraphQL server, we are going to use a REST API. You probably would prefer to create an abstraction for fetching your data models, and not to use URLs inside the components, but for the sake of the demo I will leave it like this, keeping it easy to understand.

In every step, I will explain the tools I have used to make my development easier:

* <a href=""https://github.com/typicode/jsonplaceholder"" target=""_blank"">jsonplaceholder</a> let us to build our test REST service in just 30 seconds.
* <a href=""https://github.com/arqex/react-json-table"" target=""_blank"">react-json-table</a> will format the post list for us.
<h2>Reading component's dependencies</h2>
Declaring the dependencies is easy, but we need to read and fetch them before mounting the component. That's sounds much harder. For doing so our app will use <a href=""https://github.com/rackt/react-router"" target=""_blank"">react-router</a>, but it is possible to follow the same strategy using other wrappers.

The app will be navigable, every time the user navigates the URL will change and react-router will load a different component for every URL. When the router is loading the component, it is the perfect time to read, fetch and inject the dependencies.

We will have routes to manage <em>posts</em> and <em>users</em>:
<pre class=""lang:js decode:true"">var routes = (
	&lt;Route name=""app"" path=""/"" handler={ App } location=""history"" &gt;
		&lt;DefaultRoute name=""home"" handler={ Home } /&gt;

		&lt;Route name=""posts"" path=""/posts"" handler={ Posts } /&gt;
		&lt;Route name=""post"" path=""/post/:id"" handler={ Post } /&gt;
		&lt;Route name=""users"" path=""/users"" handler={ Users } /&gt;
		&lt;Route name=""user"" path=""/user/:id"" handler={ User } /&gt;

    	&lt;NotFoundRoute name=""notfound"" handler={ Home } /&gt;
	&lt;/Route&gt;
);</pre>
In case you are not familiar with react-router, the code above defines the routes for our application. The main route <code>/</code> is handled by the <code>App</code> component, and inside it, other components will be loaded depending on the current URL. For the route <code>/posts</code> the component <code>Post,</code> that we defined before, will be loaded inside <code>App</code>. Let's have a look at the <code>App</code>'s <code>render</code> method to understand how it works:
<pre class=""lang:js decode:true"">var App = React.createClass({
	contextTypes: {
		// Router available through this.context.router
		router: React.PropTypes.func
	},

	render: function() {
		return (
			&lt;div&gt;
				&lt;Header /&gt;
				&lt;div className=""content wrapper""&gt;
					&lt;RouteHandler /&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		);
	}
}</pre>
<code>RouteHandler</code> is a component provided by react-router. It will display the component for the route that matches the current URL, if we visit the route <code>/posts</code> it will print the <code>Posts</code> component out, or if we are in <code>/users</code> it will show the <code>Users</code> component.

Our tasks are clear in order to load the dependencies:
<ul>
	<li>Detect URL changes.</li>
	<li>Know what is the component that <code>RouteHandler</code> is going to show and check its dependencies.</li>
	<li>Fetch their dependencies and inject them into the component.</li>
</ul>
We are going to add state to our <code>App</code> component to control this process:
<pre class=""lang:js decode:true"">var App = React.createClass({
	getInitialState: function(){
		return { 
			// Last URL loaded
			currentPath: false, 
			// Whenever it is fetching dependencies
			loadingDeps: false,
			// Fetched data for the current route component
			handlerDeps: {} 
		};
	}, ...
}</pre>
When I introduced the <code>App</code> component before, I defined a <code>contextType</code> for the router. That makes the <code>router</code> object accessible inside the <code>App</code> component using <code>this.context.router</code> and, thanks to it, we can check if there has been route changes easily . We will check if there has been any URL change everytime that the <code>App</code> component updates:
<pre class=""lang:js decode:true"">// Inside App component....
	isURLChanged: function(){
		return this.context.router.getCurrentPath() !== this.state.currentPath;
	},
	componentWillMount: function(){
		if( this.isURLChanged() ){
			this.fetchDependencies();
		}
	},
	componentWillReceiveProps: function(){
		if( this.isURLChanged() ){
			this.fetchDependencies();
		}
	}</pre>
Now it is clear when we are going to fetch the dependencies, but we need to know what data to fetch and, to do so, we will need what is the component that <code>RouteHandler</code> will load.

The <code>router</code> object has the <code>getCurrentRoutes</code> method that return an Array with all the routes that matches the current URL. So if we visit <code>/posts</code>, <code>this.context.router.getCurrentRoutes()</code> will return something like <code>[{route:'app'},{route:'posts'}]</code>. Knowing this we can get what component, AKA route handler, will be loaded:
<pre class=""lang:js decode:true"">// Inside App component
	getRouteHandler: function(){
		var currentRoutes = this.context.router.getCurrentRoutes(),
			i = 0,
			handler = currentRoutes[0]
		;

		// Find this component as route handler
		while( currentRoutes[ i ].handler !== this.constructor )
			i++;

		// Return the next handler, our child
		return currentRoutes[ i + 1 ].handler;
	},</pre>
Once we have the component that is going to be mounted, getting its dependencies is as easy as:
<pre class=""lang:js decode:true"">// Inside App component
	fetchDependencies: function(){
		var deps = this.getRouteHandler().deps();
		....
	}
</pre>
That's all, we already know what data dependencies we need to fetch from the server. In this part the only tool we have introduced is <a href=""https://github.com/rackt/react-router"" target=""_blank"">react-router</a>, them most popular router implementation for react that handles the component load and manage browser history for us.
<h2>Fetching and injecting the data</h2>
We already have access to what data the component needs, but we still need to fetch it before the component is mounted. That's not possible with the current <code>App</code>'s render method, data fetching takes time and the component is mounted as soon as the URL changes, so we need to delay the mounting to wait for the data. Let's modify our render method to do so:
<pre class=""lang:js decode:true"">// Inside App component
	render: function() {
		var handler = &lt;h1&gt;Loading...&lt;/h1&gt;;

		if( !this.state.loadingDeps )
			handler = React.createElement(RouteHandler, this.state.handlerDeps );

		return (
			&lt;div&gt;
				&lt;Header /&gt;
				&lt;div className=""content wrapper""&gt;
				{ handler }
				&lt;/div&gt;
			&lt;/div&gt;
		);
	}</pre>
In the update we have created a cool <code>Loading...</code> message for whenever the data is being loaded instead of the <code>RouteHandler</code>. Whenever the data has been loaded we need to update <code>this.state.loadingDeps</code> and the <code>RouteHandler</code> can be mounted with its needed data already there.

We are using <code>React.createElement</code> method ( <a href=""https://facebook.github.io/react/docs/glossary.html"" target=""_blank"">see how it works</a> ) instead of JSX to render the <code>RouteHandler</code>. This way we can pass all the props to it at once, instead of writing all the JSX tag attributes.

Everything is set up just to fetch the data, so let's have a look at the <code>fetchDependencies</code> method that actually do that:
<pre class=""lang:js decode:true"">// Inside App component
	fetchDependencies: function(){
		// We are going to refresh the dependencies
		this.setState({ currentPath: currentPath, handlerDeps: {}  });

		var handler = this.getRouteHandler();
		// If there is nothing to fetch return
		if( !handler || !handler.deps )
			return;

		// We are going to fetch data
		this.setState( { loadingDeps: true } );

		var me = this,
			router = this.context.router,
			handlerDeps = handler.deps( router.getCurrentParams(), router.getCurrentQuery() )
		;

		this.fetch( handlerDeps )
			.then( function( deps ){
				// Update the deps to load the route handler
				me.setState({
					loadingDeps: false,
					handlerDeps: deps
				});
			})
			.catch( function( err ){
				console.log( err.stack || err );
			})
		;
	}</pre>
First thing to notice is how the state of the <code>App</code> component is updated before start fetching, in order to display the <em>loading</em> message automatically while the user waits. As you can see, as soon as the data has been fetched, we set it in <code>state</code>'s <code>handlerDeps</code> and that will refresh the <code>App</code>, rendering the component with the data.

Second, we are passing the current URL parameters and query to the static <code>deps</code> method:
<pre class=""lang:js decode:true"">handlerDeps = handler.deps( router.getCurrentParams(), router.getCurrentQuery() )</pre>
That will let a component different show data depending on the current URL. In our app we have a route <code>/post/:id</code> handled by the <code>Post</code> component. That route has the id parameter, and <code>Post</code> should display the details of the post that has that id, so we pass all the current parameters and even the URL query to the <code>deps</code> method in order to let the <code>Post</code> component fetch the right data.

Let's have a look at how the <code>Post</code> component uses the id URL parameter:
<pre class=""lang:js decode:true"">var Post = React.createClass({
	statics: {
		deps: function( params, query ){
			return { post: '/posts/' + params.id };
		}
	},

	render: function() {
		var post = this.props.post;
		return (
			&lt;div className=""post""&gt;
				&lt;h2&gt;{ post.title }&lt;/h2&gt;
				&lt;Json value={ post } /&gt;
			&lt;/div&gt;
		);
	}
});</pre>
As you can see, it defines the REST endpoint to hit using the <code>id</code> parameter.

The last interesting thing of <code>fetchDependencies</code> methods is that it is using promises to know when the data has been fetched. Devs don't like promises so much lately because they hide errors and they are not cancellable. In this case they are really handy, because promises let's us fetch data from an unknown number of endpoints at the same time. We really don't care how many requests we are going to do to get all the data, we can use methods like <code>all</code> from the <a href=""https://github.com/kriskowal/q"" target=""_blank"">Q</a> promise library to get the response of all of them when they are finished.

For example, the <a href=""http://development.react-declarative-fetching.divshot.io/user/5"" target=""_blank"">User component</a> displays user's details and also the list of posts of this user. It needs to fetch data from two different REST endpoints:
<pre class=""lang:js decode:true"">var User = React.createClass({
	statics: {
		deps: function( params ){
			return {
				user: '/users/' + params.id,
				posts: '/posts?userId=' + params.id
			};
		}
	},

	render: function() {
		var user = this.props.user;
		return (
			&lt;div className=""user""&gt;
				&lt;h2&gt;{ user.name }&lt;/h2&gt;
				&lt;Json value={ user } /&gt;
				&lt;h2 className=""userPosts""&gt;{ user.name }&amp;#39;s posts&lt;/h2&gt;
				&lt;Table rows={ this.props.posts } /&gt;
			&lt;/div&gt;
		);
	}
});</pre>
Both sets of data are fetched at the same time thanks to promises and Q.

In this part, the app uses useful libraries like:

* <a href=""https://github.com/arqex/react-json"" target=""_blank"">react-json</a> is a cool component for editing JSON and creating forms that is still under development, but it has a lot of potential.
* <a href=""https://github.com/kriskowal/q"" target=""_blank"">Q</a> give us a lot of tools for handling promises.
* <a href=""https://github.com/gre/qajax"" target=""_blank"">qajax </a>is a library that make ajax requests returning promises.
<h2>What's next?</h2>
We already have the app running, was it hard?

* <a href=""http://development.react-declarative-fetching.divshot.io/"" target=""_blank"">Here the app finished and working</a>.
* <a href=""https://github.com/arqex/react-declarative-fetching"" target=""_blank"">Here its source code at github</a>.

This article doesn't intend to be really strict about how defining data dependencies must be done, it just shows that it is achievable and it will boost our productivity when creating components.

In Facebook's conf they show that their Relay framework can fetch data for components deep in the component hierarchy, all at once, a really cool feature that is not explored in this article.

Also, the approach explained in this article would make two components that request the same data at the same time receive two different copies of the data. If one updates the data, the other component would get out of sync. In frontends, it is important that when one entity is updated, all the components that depends on that entity get notified. I will tackle that matter in my next post, so stay tuned ;)";"Define the data to fetch in a declarative way with React";;"publish";"open";"open";;"define-the-data-to-fetch-declaratively-with-react";;;"2015-06-11 14:28:54";"2015-06-11 14:28:54";;"0";"http://arqex.com/?p=1058";"0";"post";;"0"
"1072";"1";"2015-08-05 16:38:04";"2015-08-05 16:38:04";"I have started to publish some React components I have created for my projects. The first one in get published was a simple way of display json data, <a href=""https://github.com/arqex/react-json-table"" target=""_blank"">react-json-table</a>, and recently I decided to make <a href=""https://github.com/arqex/react-datetime"" target=""_blank"">react-datetime</a> available for everybody, a date time picker. I have some more that I would like to make public soon, so stay tuned.

Creating a React component is not difficult, but I want to share some thoughts and conclusions I got in the process of making them public, trying to make them useful for as many projects as possible. I want to share them with you:
<h2>1 Keep it simple</h2>
I am sure you want to create a really flexible component to fit everybody needs, but a component that accepts 50 different props scares the developer. Try to make your component's API small, easy to understand and, what is more important:<strong> give default values to your props</strong>. Ideally, your component should work ok without any prop.

For me, as an user:
<pre class=""lang:js decode:true"">// I'll be glad to use your component if this works
&lt;YourComponent /&gt;

// I will probably curse you if you make me write this
// every time I use your component
&lt;YourComponent prop1={ true } prop2={ true } prop3={ true }/&gt;</pre>
<a href=""https://facebook.github.io/react/docs/reusable-components.html#default-prop-values"" target=""_blank"">Default values for props</a> really matters for usability ( not user usability, but developer one ). Even if your component accepts 100 different props, having a good set of defaults, I can start using it out of the box and learn the props I need progressivelly, without any pain.
<h2>2. Remember, it will be used by others</h2>
Most of the times, the package you want to publish was created for some specific project of yours and it works great. In order to work great in any projecs you need to have in mind:
<ul>
	<li>Classes for your markup needs to be prefixed to not to cause collision with other project's styles. If <code>YourComponent</code> render something like <code>&lt;div className=""content""&gt;&lt;/div&gt;</code> your styles may mess up others' project design. Rename it to <code>&lt;div className=""yc_content""&gt;&lt;/div&gt;</code> or similar.</li>
	<li>Pass component's props to the component root element, it will let your component's users add html attributes to the markup generated. You may want to filter what props not to apply to your root element in order to have the control.</li>
</ul>
<pre class=""lang:default decode:true crayon-selected"">class YourComponent extends React.Component{
	render(){
		// If you pass the props to the wrapper
		// of your component...
		return &lt;div {...this.props}&gt;&lt;/div&gt;;
	}
}

// I can use it like this
&lt;YourComponent 
	className=""sideComponent""
	style={{ background: ""red"" }}
	onClick={ makeSomething } /&gt;</pre>
<ul>
	<li>Do not hardcode any text. Your component's users would like to customize those texts or translate them to their languages, so any text should be configurable.</li>
</ul>
<h2>3. User input needs to be controlled</h2>
If your component is updated by user interaction, like an input field, please create it as a <strong>controlled component</strong>. React is a data driven system, any changes by the user should update the data, and the data is the one that should update your component. I, as a developer, should be able to update the component by updating the data at any time, that's why the concept of <a href=""https://facebook.github.io/react/docs/forms.html#controlled-components"" target=""_blank"">controlled components</a> exists.

Imagine your component is a slider, to select a value between 0 and 10. I initialized it like this <code>&lt;YourComponent value=""5"" /&gt;</code> so the component sets its internal state to <code>5</code> and the user starts to move the slider changing the value of the slider.

Gently, you have a added a prop <code>onChange</code> to the component to let me know when the user has moved the slider, and that's cool because it allows me to know the current value. The problem arrives when I need to add a button to reset the value of your slider again to <code>5</code>. I try to re-render <code>&lt;YourComponent value=""5"" /&gt;</code> but since it displays its interal value, i can't reset the value. I have lost the control of the component.

Ideally, <strong>your component should always display the value passed as a prop</strong>. The developer is the one who has to update the prop <code>value</code> every time the user move the slider.

You might think that it would be a tedious work for the developer and maybe he/she never needs to control the component. If so, you can let use your component <a href=""https://facebook.github.io/react/docs/forms.html#uncontrolled-components"" target=""_blank"">uncontrolled</a>, using the <code>defaultValue</code> prop for initializing it.

<code>value</code>, <code>defaultValue</code> and <code>onChange</code> are pretty standard in React world, so you should stick to them and make dev life easier, even if you think that <code>onUpdateComponentValue</code> is a much more better name for your prop.
<h2>4. Test your component</h2>
Since React is data driven, what your component display should depend 100% on the props it receives, and that make React components much easier to test than any traditional UI.

A nice set of tests will tell to the developers that they are in front of a serious project. Beside of checking that the component works as expected, it will also help you to accept pull requests from the community, being sure that they are not breaking anything.

Facebook recommends using its own testing framework Jest, which comes with lots of features thought to test React components.

Maybe I am too old fashioned, but I feel really comfortable using Mocha and JSDOM to test my components. Probably it is because they are two tools I know well, and I feel lazy about learning how to use Jest.

There are multiple <a href=""http://www.hammerlab.org/2015/02/14/testing-react-web-apps-with-mocha/"">nice tutorials</a> to learn how to test react components with Mocha and JSDOM, and you can also have a look at the <a href=""https://github.com/arqex/react-datetime/blob/master/tests/datetime-spec.js"">tests of react-datetime</a> for example.
<h2>5. Calm your dependencies down</h2>
This is something that can be applied to every javascript project that you are publishing to npm, not only react ones: <strong>Try to add as few dependencies as possible to your component</strong>. Lightweight components are like a bless. I pay special attention to this when I am about to add a npm dependency, sometimes I have found packages as big as the whole project.

Installing dependencies with npm is so easy that we use to forget that we are bloating our package with a lot of code, and sometimes we install a big dependency just to use one feature. Every time that you are going to add a dependency think that you are forcing your component's users to install it too, maybe it is a way of adding the feature without carrying the weight of the dependency.

In case of creating a React component, keep in mind that you <strong>shouldn't define React.js as a dependency</strong>. With a npm version previous than v3, it will install React again and it will probably break the host project. You can define it as as peerDependency in case that you want to remark that React.js is needed to make it work.
<h2>6. Pack it as a single file</h2>
You may think that this is not really important. Nowadays with webpack or browserify we can add the component to any project using commonjs or es6 modules, and there is no need to create a single bundle.

It's true, but packing your component in a single UMD module will allow your component to be loaded using a script tag, so <strong>you will be able to create demos</strong> using popular services like <a href=""https://jsfiddle.net/reactjs/69z2wepo/"" target=""_blank"">jsFiddle</a> or <a href=""http://codepen.io/bradleyboy/pen/OPBpGw"" target=""_blank"">codepen.io</a>. Demos are the best way of let your potential users test your component before installing, and a great companion for your documentation. They are like live tutorials!

Moreover, the single file will give you an idea of the size of your component, something important to pay attention to if you want to create a sleek component.

You have many options to create an UMD from your code. <a href=""http://webpack.github.io/docs/configuration.html#output-librarytarget"" target=""_blank"">Webpack can do it for you</a> out of the box, <a href=""http://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html"" target=""_blank"">browserify and grunt</a> can make the trick, or you can use <a href=""https://github.com/eduardolundgren/gulp-umd"" target=""_blank"">gulp-umd</a>.
<h2>7. Promote your component</h2>
Once you have published your component to npm I am sure you want everybody to use it, don't you? There are multiple sites that index react components and will make your component visible:
<ul>
	<li><a href=""http://react.rocks/"" target=""_blank"">React rocks</a></li>
	<li><a href=""https://react.parts/web"" target=""_blank"">React parts</a></li>
	<li><a href=""http://react-components.com/"" target=""_blank"">React components</a></li>
	<li><a href=""http://www.reactjsx.com"" target=""_blank"">React jsx</a></li>
</ul>
Some of them just need you to add the keyword <code>react-component</code> to your <code>package.json</code> file. Easy, isn't it?
<h3>And many more</h3>
Good docs, paying attention to the community, searching for existing similar problems and learning from them... Publishing your component can require more effort than creating it, but it deserves the work. If you have any hints that are not mentioned in this article, go ahead and leave a comment. I will add it to the list metioning you :)

&nbsp;";"7 tips to publish your React components";;"publish";"open";"open";;"7-tips-to-publish-your-react-components";;;"2015-08-05 16:44:16";"2015-08-05 16:44:16";;"0";"http://arqex.com/?p=1072";"0";"post";;"0"
"1087";"1";"2015-11-16 16:39:38";"2015-11-16 16:39:38";"<a href=""https://github.com/rackt/redux"" target=""_blank"">Redux</a> is probably the most popular library to manage the state of React.js applications at the moment. Wasn't that what Flux is about? That's it, redux is an alternative Flux library. It's creator, <a href=""https://twitter.com/dan_abramov"" target=""_blank"">Dan Abramov</a>, put a lot of effort in make redux a really flexible library, it is possible to extend it, or even change its behavior just adding your own functions to its action life cycle.

Advantages of redux goes beyond the library itself, because redux has an awesome companion called <a href=""https://github.com/gaearon/redux-devtools"" target=""_blank"">redux-devtools</a>. With the devtools you can see how the app state gets mutated and you can go back and forth in the state history, canceling and repeating actions, what is a really cool feature when developing.

<a href=""http://arqex.com/wp-content/uploads/2015/11/devtools.gif""><img class=""aligncenter size-full wp-image-1112"" src=""http://arqex.com/wp-content/uploads/2015/11/devtools.gif"" alt=""devtools"" width=""776"" height=""688"" /></a>

But I love <a href=""https://github.com/arqex/freezer"" target=""_blank"">freezer.js</a>, a different library. It is a such simple and lightweight solution to handle the app state and keep the data changes flowing just in one direction. The problem about using freezer.js is that I don't have the cool devtools I have with redux... don't I?

In this article I want to explore redux internals with the purpose of use redux-devtools in a freezer.js application, but you probably could use this info to use redux-devtools with any other Flux library. The result of the investigation is <a href=""https://github.com/arqex/freezer-redux-devtools"" target=""_blank"">freezer-redux-devtools</a>, a package ready to use freezer and redux-devtools together.
<h2>Knowing redux</h2>
Before starting, I need to say that I am not a redux expert, maybe some of the terms I use here are not accurate or things can be done much better: Feel free to complain in the comments.

So let's hack redux-devtools! Hacking is not bad, being hackable is one of the most cool features of redux, you can see it studing how the devtools work.

A redux application <strong>stores all of its state in one object</strong> and there is also <strong>just one function to update the state</strong>. That function receives the current state and an action, and returns a new state, the result of applying the action to the current state. The state received should never be modified inside the function, and the state returned will be its replacement for the application.

Never modifying the state directly is how we are getting the benifits of immutability using just functions in redux. It sounds much like the way that freezer works, creating new objects without modifying previous ones.

<img class=""aligncenter wp-image-1091 size-full"" src=""http://arqex.com/wp-content/uploads/2015/11/redux.png"" alt=""Redux flux"" width=""581"" height=""343"" />

Every time that a new state is generated the app is re-rendered, hence we have a reactive application.

But, how can you make a so complex function that can handle all the possible changes in an application? The answer is creating it by composition of smaller functions. If your functions receive an state and returns a new one, it is simple to chain multiple smaller functions that handle different state parts in your app. If you want to know more of this basic pattern of redux, you can have a look at its <a href=""http://rackt.org/redux/docs/basics/Reducers.html"" target=""_blank"">reducer documentation</a>.

<img class=""aligncenter wp-image-1092 size-full"" src=""http://arqex.com/wp-content/uploads/2015/11/redux-reducers.png"" alt=""redux reducers"" width=""744"" height=""190"" />

The important thing to know for us is that all the changes made to the state go through one only channel (like the event hub in freezer.js), and what's better: <strong>redux makes easy to intercept what's going through the channel using middleware</strong>. <a href=""https://en.wikipedia.org/wiki/Middleware"" target=""_blank"">Middleware</a> is a special kind of functions that have access to the action and the current state before they get into the big reducer function in order to modify them or to avoid that they generate a new state. Middleware functions can also modify the new state before it gets into the store again.

<a href=""http://arqex.com/wp-content/uploads/2015/11/redux-middleware.png""><img class=""aligncenter size-full wp-image-1094"" src=""http://arqex.com/wp-content/uploads/2015/11/redux-middleware.png"" alt=""redux-middleware"" width=""744"" height=""195"" /></a>

&nbsp;

Creating a middleware we can have access to all the actions that are dispatched in a redux app transparently.
<h2>Knowing redux-devtools</h2>
Redux-devtools is an independent redux application that lives beside the main one. It has its own store, dispatcher and reducer and it comes with a middleware function that should be applied to the app that we are developing. That middleware allows to update the devtools panel when an action is dispatched by the host app, or dispatch actions in the app when the devtools panel is used.

Let's see how to add the redux-tools to a redux app:
<pre class=""lang:js decode:true"">// This is the function that will create our store.
// It is compound by middleware functions.
// In our case, just the devTool one.
const finalCreateStore = compose(
  devTools()
)( Redux.createStore );

// Compose the big function that will handle all the
// state changes, `reducers` is just a list of functions
const reducer = combineReducers(reducers);

// Create the only store.
// Actions will be intercepted by the middleware
// Updates will be handled by the reducers
const store = finalCreateStore(reducer);

/**
 * Root component that will be updated on state changes.
 */
export default class Root extends Component {
  render() {
    return (
      &lt;div&gt;
        &lt;Provider store={store}&gt;{() =&gt; &lt;App /&gt;}&lt;/Provider&gt;
        &lt;DebugPanel top right bottom&gt;
          &lt;DevTools store={store} monitor={LogMonitor} /&gt;
        &lt;/DebugPanel&gt;
      &lt;/div&gt;
    );
  }
}</pre>
If we have a look at the app store, we will find the devtools store in it.
<pre class=""lang:js decode:true"">// store = {
// 	// this is the devtools store for redux-devtools next,
// 	// with React 0.14 support
// 	liftedStore:{ ... },
// 	...
// }</pre>
The strategy to use redux-devtools in a non-redux application is creating a store like if we were in a redux app, and apply our middleware and the devtools one to it. That way we will make the devtools believe that they are in a redux application. That's it,<strong> your Flux application must dispatch redux actions whenever an action is dispatched</strong>, and it also <strong>must listen to devTools actions in order to update its own state</strong>.
<h2>Creating middleware that communicates with redux-devtools</h2>
<a href=""https://medium.com/@arqex/react-the-simple-way-cabdf1f42f12"" target=""_blank"">Freezer way of flux</a> is much simpler than redux explanation above. A freezer object is a store that makes easy to update any piece of data in it, creating a new immutable state on every update. Everytime the state is updated, an update event is triggered in the freezer object. The freezer object is also a event hub, it is possible to trigger or listen any event on it, so if we use these events instead of traditional flux actions, we have a complete system to create Flux applications.

Following the strategy mentioned before, to make a freezer app work with redux-devtools we need to dispatch a redux action on any event triggered in the freezer store. Also, we need to reconstruct the freezer state when some action is dispatched in the devTools store. Let's have a look at how we can achieve this, fist of all, how to include redux-devtools in our freezer app:
<pre class=""lang:js decode:true"">// Create a freezer store
var FrezerStore = new Freezer({});
const store;
FrezerStore.on('afterAll', function( eventName ){
	// We don't dispatch if the flag is true
	if( this.skipDispatch )
		this.skipDispatch = 0;
	else {
		// Every argument but the first one is the reaction
		// input, so pass them to the action as arguments.
	
		var args = [].slice.call( arguments, 1 );

		// Dispatch an action in the store
		store.dispatch({ type: reactionName, args: args });
	}
});

// Create a redux store to make the devTools
// believe that is working within a redux app
const finalCreateStore = Redux.compose(
	// We will create a middleware to hijack
	// devtools actions
	FreezerMiddleware( State ),
	DevTools.devTools()
)( Redux.createStore );

store = finalCreateStore(combineReducers(reducers));

/**
 * Root component including devtools
 * and refreshing on state change
 */
export default class Root extends Component {
  render() {
    return (
      &lt;div&gt;
      	&lt;App state={ State.get() } /&gt;
      	// Add the panel to our Freezer app
			&lt;DebugPanel top right bottom&gt;
			 &lt;DevTools store={store} monitor={LogMonitor} /&gt;
			&lt;/DebugPanel&gt;
      &lt;/div&gt;
    );
  }
  componentDidMount() {
  	Store.on('update', () =&gt; this.forceUpdate());
  }
}</pre>
In the code, we create a redux store to make redux-devtools believe that it is in a redux application. Then, freezer's <code>afterAll</code> event is listened to transform all the freezer events in redux actions. Just with this, we will see how every interaction with our freezer app will be reflected in the devtools panel.

To update freezer's state when we interact with the devtools we have added the <code>FreezerMiddleware</code> function to redux's middleware stack. It works as follows:
<pre class=""lang:js decode:true"">var ActionTypes = {
	INIT: '@@INIT',
	PERFORM_ACTION: 'PERFORM_ACTION',
	TOGGLE_ACTION: 'TOGGLE_ACTION'
};

function FreezerMiddleware( State ){
	return function( next ){
		// We will be ignoring any reducer or state we may receive
		// and we will use ours instead
		return function FreezerStoreEnhancer( someReducer, someState ){
			// The comitted state will be the state inside devTools store
			var commitedState = State.get();

			// We are going to create our own reducer and ignore
			// any reducer passed to the store, because freezer
			// is the one that decide how the state is going to be after
			// an update
			var reducer = function( state, action ){
				// init action is triggered when the devtools
				// start or is recovered from the localStorage
				if( action.type == ActionTypes.INIT ){
					// Just sync freezer's state
					State.set( state || commitedState );
				}
				// perform an action only happens on an action
				// from outside the devTools that already have
				// been triggered in freezer
				else if( lastAction != ActionTypes.PERFORM_ACTION ) {
					// When the devtools dispatcha an action we
					// need to add a flag to our freezer store to now
					// enter in a infinite loop dispatch&lt;-&gt;trigger
					State.skipDispatch = 1;

					// Synch freezer's store with the action dispatched
					// by the devtools
					State.trigger.apply( State, [ action.type ].concat( action.arguments || [] ) );
				}

				// The only valid state is freezer's one,
				// so we return it
				return State.get();
			};

			// Pass our reducer to the next middleware (devTools one)
			// to get the store with devTools modification;
			var store = next( reducer );

			// Now the store has the liftedStore inside, the one used by
			// the devTools
			var dtStore = store.liftedStore;

			// Cache the original devTools dispatch method
			var toolsDispatcher = dtStore.dispatch;

			// Override devTools store's dispatch
			dtStore.dispatch = function( action ){
				// this is happening before the action
				// reaches the reducers
				
				// Store the action type to be read
				// in the reducer
				lastAction = action.type;

				// We only act when some action in the devTool is toggled
				if( action.type == ActionTypes.TOGGLE_ACTION ){

					// Get all the computed states stored in the devTools
					var states = dtStore.getState().computedStates;
					// And select the previous one to the one toggled
					var nextValue = states[ action.id - 1].state;

					// Sync freezer state with that devtools state
					// Devtools will reconstruct all the remaining steps
					// dispatching actions that will be captured by our
					// reducer
					State.set( nextValue );
				}

				// Call the devtools dispatch method, work as usual
				toolsDispatcher.apply( dtStore, arguments );

				return action;
			};

			return store;
		};
	};
}</pre>
Lot of code! I have tried to comment it well, but there are some things that you must know about the devtools store to fully understand it.
<ul>
	<li><code>PERFORM_ACTION</code> is dispatched by the devtools when a new action has happened in the app, in order to add it to the devtools. We won't use this kind of actions to trigger freezer events, because they are the product of the freezer events.</li>
	<li><code>TOGGLE_ACTION</code> is dispatched by the devtools when an action is activated/deactivated in the devtools panel. We need to reconstruct freezer's state based on these kind of actions.</li>
	<li>All the states generated by actions are stored in the devtools and you can find any of them using the <code>id</code> included in the devtool action.</li>
	<li>When an action is toggled, devtools set its own state to the state previous to that action dispatching. After that, it dispatches all the enabled actions that were in the devtools after the toggled action, so the state is reconstructed as if action was toggled.</li>
</ul>
There are two main points in this code
<ul>
	<li>We replace the devtools dispatcher to get prepared to the changes that will be produced by the devtools.</li>
	<li>We create a reducer that will modify freezer's state according to devtool actions and return the updated freezer's state. That state is the one that will be stored by the devtools as the result of its action.</li>
</ul>
<h2>What I have learned</h2>
I made this exercise to get some tools for freezer, but I have learned a lot about redux with it. I can understand now why redux is used by so many devs. It is a really flexible system that can adapt to any project and solves app state management in a very elegant way. I will continue using freezer in my React apps though, both solutions are very similar in concept but Freezer apps need much less boilerplate code and make easier to update big tree states.

I feel that redux-devtools can be used without much hassle by any Flux library that has one dispatcher or entry point for state change, since the communication can be created point to point between both dispatchers. In Flux implementations with multiple stores and dispatchers the things get more complicated, but I think it would be possible to create a mechanism to know what store to update on a devtool change.

If you are thinking to create a middleware to make your flux library work along with redux-devtools these are some nice links for you:
<ul>
	<li><a href=""https://github.com/arqex/freezer-redux-devtools"" target=""_blank"">The full implementation of the freezer adapter for redux-devtools</a>.</li>
	<li>Adding redux to your app is not even needed if you use <a href=""https://github.com/zalmoxisus/redux-devtools-extension"" target=""_blank"">chrome's redux-devtools extension</a>.</li>
	<li><a href=""http://rackt.org/redux/docs/introduction/index.html"" target=""_blank"">Redux documentation</a>. Read reducer and middleware docs is a must.</li>
</ul>";"Using redux devtools without redux";;"publish";"open";"open";;"using-redux-devtools-without-redux";;;"2015-11-16 16:39:38";"2015-11-16 16:39:38";;"0";"http://arqex.com/?p=1087";"0";"post";;"0"
"1106";"1";"2015-10-30 16:19:08";"2015-10-30 16:19:08";"This article was <a href=""https://medium.com/@arqex/react-the-simple-way-cabdf1f42f12"" target=""_blank"">originally published at Medium</a>, 21st of september 2015 and explains how to create Flux applications almost without boilerplate code, and start enjoying React.
<h2>The key is the unidirectional dataflow</h2>
Everybody starting with React realize quiclkly about how easy is to create components and build an UI that can be used in production.

Once you get used to how components work, you begin to feel the need of handling the data that is used by them efficently. That data is often called “the state” of the app, and managing it well is the corner stone of every frontend application.

<strong>Flux</strong> is usually the concept used to manage the data with React. It contains <strong>actions</strong> to update the state, <strong>stores</strong> to hold it and a <strong>dispatcher</strong> to coordinate the changes, but the truth is that <strong>the important statement of flux is the unidirectional data flow</strong>: When the state is updated, the application is re-rendered reactively, so it is the state who rules the application.

You might be saying now “Hey! That’s not the definition of unidirectional data flow!”. Flux definition, including stores, actions and a dispatcher, usually explains the unidirectional dataflow in a more complex way that it should. Removing all the flux pieces, the unidirectional dataflow graph can be shown like this:

<a href=""http://arqex.com/wp-content/uploads/2015/11/1-WOYT1aVy1jQMBw3C1lEbSw.png""><img class=""aligncenter size-full wp-image-1108"" src=""http://arqex.com/wp-content/uploads/2015/11/1-WOYT1aVy1jQMBw3C1lEbSw.png"" alt=""1-WOYT1aVy1jQMBw3C1lEbSw"" width=""662"" height=""432"" /></a>

The main implication of this graph is that <strong>only state changes can update the UI</strong>. You will be building a data driven interface.

There are dozens of Flux frameworks out there (even <a href=""https://github.com/arqex/fluxify"" target=""_blank"">I created one</a> some time ago). Some of them don’t have a dispatcher, others don’t include stores… But everyone follows the unidirectional dataflow.
<h2>The simplest Flux with Freezer</h2>
The best way of explaining something is creating an example. Why not the the typical <strong>todo app</strong>? We are going to use <strong>Freezer</strong> to build it, <a href=""http://freezer-todos.divshot.io/"" target=""_blank"">you can see it working here</a> and <a href=""https://github.com/arqex/freezer-todomvc"" target=""_blank"">check the code at github</a>.

<a href=""https://github.com/arqex/freezer"" target=""_blank"">Freezer</a> is not a new library, but it is pretty unkown. It’s a data structure that triggers events when it is updated, and it happens to contain all the needed to add the unidirectional data flow to your app. It also have some other benefits for React:
Its data is immutable, an efficent way of saving memory and speed up your React app.
<ul>
	<li>It is tiny, 9kb minified.</li>
	<li>It has no dependencies.</li>
	<li>It has an open event system, the perfect dispatcher replacement.</li>
	<li>Data is stored in plain js array and objects, so it is possible to use popular utility libraries like underscore, lodash or rambda with it.</li>
	<li>Using it, you can have all the app state in one place.</li>
</ul>
These are nice reasons to give it a try, but the main one is the simplicity of developing React apps with it, without dispatcher, actions nor stores.
<h2>Freezer as the state holder</h2>
The famous todo app become really simple to create using React and Freezer. To start, let’s overview how Freezer works defining the app state in a Freezer object.

<script src=""https://gist.github.com/arqex/2fdfdb3fde094c4803d7.js""></script>

The <code>freezer</code> object will hold the state of our app. In order to access to the state data you need to use the get method, and you will get an immutable object with all of it.

<script src=""https://gist.github.com/arqex/94124081333099b99c68.js""></script>

The state data hold by Freezer is immutable. It cannot be changed, it will be replaced by new one when an update is needed. To do so, state nodes come with <a href=""https://github.com/arqex/freezer#update-methods"" target=""_blank"">updater methods</a> that request a new state for our application. For example, the push method in the arrays.

<script src=""https://gist.github.com/arqex/095e6528f7b514c0c63b.js""></script>

Every time the state is updated, Freezer create a new immutable object for it reusing the unmodified parts of the data tree. It also triggers an update event, so you can subscribe to it in order to refresh your UI every time the data changes. This way we will have a reactive, data driven UI.

<script src=""https://gist.github.com/arqex/5f675c10e416e9401f4e.js""></script>

The update event is always triggered on the next tick, so Freezer won’t try to re-render your UI if some updater method is called in a middle of a render (You should never update the state in a middle of a render, but just in case).
<h2>Freezer as the orchestra director</h2>
As I said before, using Freezer there is no need of a dispatcher, stores nor actions. You can develop in a very similar but simpler way.
<ul>
	<li>Instead of stores, all the data is hold in one Freezer object that emit events on change. It is possible to listen to changes in one particular node using listeners, in case that a fine grained rendering is needed.</li>
	<li>Instead of a dispatcher, we can use the open event system to coordinate the state changes.</li>
</ul>
<script src=""https://gist.github.com/arqex/a28ccc1fe69d5c80dd26.js""></script>
<ul>
	<li>Instead of registering actions in the dispatcher, you can create reactions to Freezer events. Flux also recommends to create action creators (more boilerplate code) because payloads are not very sematic and they are difficult to read by the developers. Freezer events accepts any number of arguments and pass them to the reactions, easy to understand.</li>
</ul>

<script src=""https://gist.github.com/arqex/05b2e10ae05a0e3eb053.js""></script>

<a href=""https://gist.github.com/arqex/60221c8855fede91d07d"" target=""_blank"">See here how much effort is needed to do the same with standard Flux</a>.

There is no need of having a <code>waitFor</code> method like in Flux, if you want to call a reaction after another, just trigger a new event at the end of the first one.

That’s it.<strong> Just events, reactions and no boilerplate code at all</strong>.
<h2>Tips to use React with Freezer</h2>
Events are the key piece for reducing boilerplate code of a traditional Flux system. We used Freezer’s ones, but you can even <a href=""http://arqex.com/1028/better-flux-dom-events"" target=""_blank"">use DOM events</a> if you are creating a web application, making the events bubble through the React hierarchy. Using Freezer has some other advantages though.
<h3>Familiar project structure</h3>
We don’t have dispatcher or stores, so we don’t need to register actions or bind listeners to stores often, but, we have reactions that are similar to actions. It is recommended group this actions by their domain, <a href=""https://github.com/arqex/freezer-todomvc/blob/master/src/todoReactions.js"" target=""_blank"">see the todoActions file</a> in the todo app. Don’t you find it clear?
<h3>Components without internal state</h3>
Using Freezer it is possible to have all the data outside the components. Did you realize how we had a <code>todoInput</code> property in our state? There the value of the main input to create new todos is stored. Everytime the user type in it, the property is updated. It allow us to control the contents of the input from inside and outside of the component.

<script src=""https://gist.github.com/arqex/a21efc8fb9322947e959.js""></script>

The todo app also emulates that it is storing the todos in the server to show how to handle asynchronous reactions. Again it is really cool to control every todo status from outside, so we can show informative messages to the user while the server replies. Let’s see the code of the todo update reaction:

<script src=""https://gist.github.com/arqex/1e8f859fa536ddc56047.js""></script>

<h3>Immutable data boosts your app performance</h3>
You might be thinking that having the input values outside the components will re-render your whole app everytime the user types. Fortunatelly, using Freezer also allows to skip useless re-render checks. Not having an internal state, our components have<strong> pure render methods</strong>. It means that if the props don’t change, calling the render method is not needed.

Since our properties are immutable, check if there has been some change in the data is as easy as using a plain comparison. Have a look at the TodoList component implementation.

<script src=""https://gist.github.com/arqex/be1e96be2ff613690ece.js""></script>

It is possible to use the official <a href=""https://facebook.github.io/react/docs/pure-render-mixin.html"" target=""_blank"">pure render mixin</a> or <a href=""https://github.com/gaearon/react-pure-render"" target=""_blank"">react-pure-render</a> that offers the implementation as a higher order component.
<h3>Cheap undo and redo</h3>
This is the typical feature that is highlited when speaking about immutable data. See <a href=""http://jsbin.com/hugusi/1/edit?js,output"" target=""_blank"">a JSON editor made with Freezer</a> that offers undo/redo.

When the state is updated, all the nodes that were not changed are reused by the new state, so it is possible to save previous states and the memory usage is not going to increment drastically.
<h3>All the state in one place</h3>
Having all the app data in the same place let any part of the application know if something has changed elsewhere, so it is easier to coordinate the updates. But there are more benefits.

With all the data in one place it is easy to serialize and save it for later. That would let the user close the app and continue at the same point when he reopen it the following day.

Also, it is easier to inject the data in to the application making simpler to render the apps in the server side. Just recreate the data, and React will render the page to let you serve it without a browser.
<p style=""text-align: center;"">...</p>
Freezer and React are a great combo. They are easy to understand and take little effort to get used to work them. Why not to give them a try in your next project?";"React.js the simple way";;"publish";"open";"open";;"react-js-the-simple-way";;;"2015-11-16 16:22:36";"2015-11-16 16:22:36";;"0";"http://arqex.com/?p=1106";"0";"post";;"1"
